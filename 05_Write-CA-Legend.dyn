{
  "Uuid": "835f952c-e6fa-4cfc-8ced-085e223da08a",
  "IsCustomNode": false,
  "Description": "",
  "Name": "05_Write-CA-Legend",
  "ElementResolver": {
    "ResolutionMap": {}
  },
  "Inputs": [],
  "Outputs": [],
  "Nodes": [
    {
      "ConcreteType": "CoreNodeModels.Watch, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "af74181b2e1546fca249802c73f45ddd",
      "Inputs": [
        {
          "Id": "b9cb13027c5347fa868913a23cbcc240",
          "Name": "",
          "Description": "Node to show output from",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "ed89fc1735c345c2b00b92508b3ec09d",
          "Name": "",
          "Description": "Node output",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Visualize the node's output"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Import Revit and Dynamo modules\r\nimport clr\r\nclr.AddReference('RevitServices')\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\n\r\nclr.AddReference('RevitAPI')\r\nfrom Autodesk.Revit.DB import *\r\n\r\n# Inputs\r\nsheet_name = IN[0]  # The name of the sheet to find viewports on\r\nnew_type_name = IN[1]  # The new type name to set (e.g., \"no label\")\r\n\r\n# Output list to store results\r\noutput_data = []\r\n\r\n# Access the current document\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\n\r\n# Start a transaction to modify Revit data\r\nTransactionManager.Instance.EnsureInTransaction(doc)\r\n\r\ntry:\r\n    # Find the sheet with the given name\r\n    sheet = None\r\n    sheet_collector = FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Sheets).WhereElementIsNotElementType()\r\n\r\n    for s in sheet_collector:\r\n        if s.Name == sheet_name:\r\n            sheet = s\r\n            break\r\n\r\n    if sheet is None:\r\n        output_data.append(f\"No sheet found with the name '{sheet_name}'.\")\r\n    else:\r\n        # Get viewports on the sheet\r\n        viewport_ids = sheet.GetAllViewports()\r\n\r\n        if len(viewport_ids) == 0:\r\n            output_data.append(f\"No viewports found on sheet '{sheet_name}'.\")\r\n        else:\r\n            output_data.append(f\"Found {len(viewport_ids)} viewports on sheet '{sheet_name}'.\")\r\n\r\n            # Iterate over the viewport IDs to find the desired viewport containing the legend view\r\n            viewport_to_modify = None\r\n            for vp_id in viewport_ids:\r\n                viewport = doc.GetElement(vp_id)\r\n                view_id = viewport.ViewId\r\n                view = doc.GetElement(view_id)\r\n                \r\n                # Check if this is the legend we want to modify\r\n                if view.Name == \"DSP Comp Ref\":\r\n                    output_data.append(f\"Found Viewport containing the Legend View named '{view.Name}', Viewport ID: {viewport.Id.IntegerValue}\")\r\n                    viewport_to_modify = viewport\r\n                    break\r\n\r\n            if viewport_to_modify:\r\n                # Collect necessary data before deletion\r\n                bbox = viewport_to_modify.GetBoxCenter()  # Store location of the viewport\r\n                view_id = viewport_to_modify.ViewId  # Store the view ID\r\n\r\n                # Collect the available viewport type information from all viewports\r\n                viewport_type_dict = {}\r\n                collector = FilteredElementCollector(doc).OfClass(Viewport)\r\n\r\n                # Iterate through collected elements to gather viewport types\r\n                for viewport in collector:\r\n                    type_element = doc.GetElement(viewport.GetTypeId())\r\n                    if type_element:\r\n                        type_name = type_element.get_Parameter(BuiltInParameter.SYMBOL_NAME_PARAM).AsString()\r\n                        if type_name and isinstance(type_name, str):\r\n                            type_name_lower = type_name.lower()\r\n                            if type_name_lower not in viewport_type_dict:\r\n                                viewport_type_dict[type_name_lower] = type_element\r\n\r\n                # List all collected viewport types for debugging\r\n                collected_types = [key for key in viewport_type_dict.keys()]\r\n                output_data.append(f\"Collected viewport types: {collected_types}\")\r\n\r\n                # Normalize new type name for comparison (case insensitive)\r\n                new_type_name_normalized = new_type_name.lower()\r\n\r\n                # Check if the new type name exists in the project\r\n                new_type_element = viewport_type_dict.get(new_type_name_normalized, None)\r\n\r\n                if new_type_element is None:\r\n                    output_data.append(f\"No viewport type with the name '{new_type_name}' was found in the gathered viewport types.\")\r\n                else:\r\n                    output_data.append(f\"Viewport type '{new_type_name}' found, ID: {new_type_element.Id}\")\r\n\r\n                    # Delete the old viewport\r\n                    try:\r\n                        doc.Delete(viewport_to_modify.Id)\r\n                        output_data.append(f\"Deleted original Viewport ID {viewport_to_modify.Id}.\")\r\n                    except Exception as e:\r\n                        output_data.append(f\"Error deleting original viewport ID {viewport_to_modify.Id}: {str(e)}\")\r\n\r\n                    # Commit the transaction for deletion\r\n                    TransactionManager.Instance.TransactionTaskDone()\r\n\r\n                    # Start a new transaction to create the viewport\r\n                    TransactionManager.Instance.EnsureInTransaction(doc)\r\n\r\n                    # Create a new viewport with the desired type\r\n                    try:\r\n                        # Validate the bounding box center\r\n                        if bbox is None:\r\n                            bbox = XYZ(0, 0, 0)  # Default location if bbox is invalid\r\n\r\n                        new_viewport = Viewport.Create(doc, sheet.Id, view_id, bbox)\r\n\r\n                        # Set the new type if applicable\r\n                        if new_viewport and new_type_element:\r\n                            new_viewport.ChangeTypeId(new_type_element.Id)\r\n                            output_data.append(f\"Re-created viewport with new type '{new_type_name}' successfully.\")\r\n                        else:\r\n                            output_data.append(f\"Failed to create new viewport or find the appropriate type.\")\r\n\r\n                    except Exception as e:\r\n                        output_data.append(f\"Error re-creating viewport with new type '{new_type_name}': {str(e)}\")\r\n\r\nexcept Exception as e:\r\n    output_data.append(f\"General error accessing data: {str(e)}\")\r\n\r\n# Complete the transaction\r\nTransactionManager.Instance.TransactionTaskDone()\r\n\r\n# Output results\r\nOUT = output_data\r\n",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "f132279cdf664efd89d7fe2ad64ab873",
      "Inputs": [
        {
          "Id": "7d715e656c164892bb747f72b1ad9d03",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "55954be98b3e46fbbf8c6367c253a537",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "8719839cfb3f486098e2ba7ad8b0f816",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "CoreNodeModels.Watch, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "ef25309f12e4453cabd7e2738062422c",
      "Inputs": [
        {
          "Id": "2672cb1425534b74b138eb2f1ac67e7e",
          "Name": "",
          "Description": "Node to show output from",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "c9b0cc2d354f41648bab14c022c1dde5",
          "Name": "",
          "Description": "Node output",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Visualize the node's output"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Import Revit API and necessary libraries\r\nimport clr\r\nclr.AddReference('RevitServices')\r\nfrom RevitServices.Persistence import DocumentManager\r\n\r\nclr.AddReference('RevitAPI')\r\nfrom Autodesk.Revit.DB import *\r\n\r\n# Ensure the script doesn't crash if `IN` is missing or Revit is not ready\r\ntry:\r\n    # Get the current Revit document\r\n    doc = DocumentManager.Instance.CurrentDBDocument\r\n\r\n    # Main logic: Process all viewports\r\n    viewport_ids = []\r\n    viewport_names = []\r\n    viewport_types = []\r\n    view_ids = []\r\n\r\n    # Filter to get all Viewports in the document\r\n    collector = FilteredElementCollector(doc).OfClass(Viewport)\r\n\r\n    for viewport in collector:\r\n        # Get the name of the view associated with the viewport\r\n        view_id = viewport.ViewId\r\n        view = doc.GetElement(view_id)\r\n        viewport_name = view.Name if view else \"Unknown Name\"\r\n\r\n        # Get the type of the viewport by accessing the Element Type Name directly\r\n        type_element = doc.GetElement(viewport.GetTypeId())\r\n        viewport_type_name = type_element.get_Parameter(BuiltInParameter.SYMBOL_NAME_PARAM).AsString() if type_element else \"Unknown Type\"\r\n\r\n        # Append to the output lists\r\n        viewport_ids.append(viewport.Id.IntegerValue)\r\n        viewport_names.append(viewport_name)\r\n        viewport_types.append(viewport_type_name)\r\n        view_ids.append(view_id.IntegerValue if view else \"Unknown View ID\")\r\n\r\n    # Output results to Dynamo\r\n    OUT = {\r\n        \"Viewport IDs\": viewport_ids,\r\n        \"Viewport Names\": viewport_names,\r\n        \"Viewport Types\": viewport_types,\r\n        \"View IDs\": view_ids\r\n    }\r\n\r\nexcept Exception as e:\r\n    # Gracefully handle errors\r\n    OUT = f\"An error occurred: {e}\"\r\n",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "aacef8892520442490ef19bd05722e60",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "735e035b6b8247afa5c20d313b387fd9",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"DSP Comp Ref\";",
      "Id": "3a4ab9ac25a0468298f570c7654fcdbd",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "fcbf07d7528c43178f53d40273219026",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"no label\";",
      "Id": "03262b6775914ce2bc4a2b52ea649be4",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "12858fb7c295418fbf8f7f9db3629347",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Nodes.DSModelElementSelection, DSRevitNodesUI",
      "NodeType": "ExtensionNode",
      "InstanceId": [
        "1bdcdaeb-7f88-4554-b994-fead175ef2a1-0045abdb"
      ],
      "Id": "bef5cb9475ac46af8e9722bce6c0dbc9",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "29b664824961404aa7f792d50a996754",
          "Name": "Element",
          "Description": "The selected elements.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled"
    },
    {
      "ConcreteType": "CoreNodeModels.Watch, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "f3aecca83a9a48d4b2e409eedf950e0a",
      "Inputs": [
        {
          "Id": "8dd2110a42974972984cdd07eb0e345d",
          "Name": "",
          "Description": "Node to show output from",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "b50dd63b9a474c88b16dbf17e972fae6",
          "Name": "",
          "Description": "Node output",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Visualize the node's output"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"FIXTURE PLAN\";",
      "Id": "59ad25546c3249658e2c360081bd99c5",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "cf0d43b95dc248b28710af614b24eab9",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    }
  ],
  "Connectors": [
    {
      "Start": "8719839cfb3f486098e2ba7ad8b0f816",
      "End": "b9cb13027c5347fa868913a23cbcc240",
      "Id": "88590f07494949aba882eeac5a4fe8cd",
      "IsHidden": "False"
    },
    {
      "Start": "735e035b6b8247afa5c20d313b387fd9",
      "End": "2672cb1425534b74b138eb2f1ac67e7e",
      "Id": "c20cd6b5451541099cc137244e2665d3",
      "IsHidden": "False"
    },
    {
      "Start": "12858fb7c295418fbf8f7f9db3629347",
      "End": "55954be98b3e46fbbf8c6367c253a537",
      "Id": "3cefc491f2f542fa8540029ea43fb417",
      "IsHidden": "False"
    },
    {
      "Start": "29b664824961404aa7f792d50a996754",
      "End": "8dd2110a42974972984cdd07eb0e345d",
      "Id": "4db58404a6664a93be0f0c533ce33181",
      "IsHidden": "False"
    },
    {
      "Start": "cf0d43b95dc248b28710af614b24eab9",
      "End": "7d715e656c164892bb747f72b1ad9d03",
      "Id": "b29b5c7e4a324d58b843662b6faa286c",
      "IsHidden": "False"
    }
  ],
  "Dependencies": [],
  "NodeLibraryDependencies": [],
  "Thumbnail": "",
  "GraphDocumentationURL": null,
  "ExtensionWorkspaceData": [
    {
      "ExtensionGuid": "28992e1d-abb9-417f-8b1b-05e053bee670",
      "Name": "Properties",
      "Version": "2.16",
      "Data": {}
    },
    {
      "ExtensionGuid": "DFBD9CC0-DB40-457A-939E-8C8555555A9D",
      "Name": "Generative Design",
      "Version": "3.0",
      "Data": {}
    }
  ],
  "Author": "",
  "Linting": {
    "activeLinter": "None",
    "activeLinterId": "7b75fb44-43fd-4631-a878-29f4d5d8399a",
    "warningCount": 0,
    "errorCount": 0
  },
  "Bindings": [],
  "View": {
    "Dynamo": {
      "ScaleFactor": 1.0,
      "HasRunWithoutCrash": true,
      "IsVisibleInDynamoLibrary": true,
      "Version": "2.16.2.5624",
      "RunType": "Automatic",
      "RunPeriod": "1000"
    },
    "Camera": {
      "Name": "Background Preview",
      "EyeX": -17.0,
      "EyeY": 24.0,
      "EyeZ": 50.0,
      "LookX": 12.0,
      "LookY": -13.0,
      "LookZ": -58.0,
      "UpX": 0.0,
      "UpY": 1.0,
      "UpZ": 0.0
    },
    "ConnectorPins": [],
    "NodeViews": [
      {
        "Name": "Watch",
        "ShowGeometry": true,
        "Id": "af74181b2e1546fca249802c73f45ddd",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1760.6196475469917,
        "Y": 1078.7289428855863
      },
      {
        "Name": "Python Script",
        "ShowGeometry": true,
        "Id": "f132279cdf664efd89d7fe2ad64ab873",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1509.5995863866967,
        "Y": 1091.2919758978203
      },
      {
        "Name": "Watch",
        "ShowGeometry": true,
        "Id": "ef25309f12e4453cabd7e2738062422c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 585.40937856494713,
        "Y": 820.61530316739265
      },
      {
        "Name": "Python Script",
        "ShowGeometry": true,
        "Id": "aacef8892520442490ef19bd05722e60",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 360.0,
        "Y": 711.5125896237405
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "3a4ab9ac25a0468298f570c7654fcdbd",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 862.43342601537336,
        "Y": 614.98291857091851
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "03262b6775914ce2bc4a2b52ea649be4",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1239.7871963326268,
        "Y": 1184.1194758978204
      },
      {
        "Name": "Select Model Element",
        "ShowGeometry": true,
        "Id": "bef5cb9475ac46af8e9722bce6c0dbc9",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 913.218566802549,
        "Y": 875.36704308577782
      },
      {
        "Name": "Watch",
        "ShowGeometry": true,
        "Id": "f3aecca83a9a48d4b2e409eedf950e0a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1203.2029850005217,
        "Y": 878.90670322439519
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "59ad25546c3249658e2c360081bd99c5",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1213.2676605811612,
        "Y": 1055.7642714873448
      }
    ],
    "Annotations": [
      {
        "Id": "d1e32b45d9314d2181205c765131fdac",
        "Title": "Identify Viewports and Types",
        "DescriptionText": "<Double click here to edit group description>",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "aacef8892520442490ef19bd05722e60"
        ],
        "HasNestedGroups": false,
        "Left": 350.0,
        "Top": 542.5125896237405,
        "Width": 194.0,
        "Height": 301.0,
        "FontSize": 36.0,
        "InitialTop": 711.5125896237405,
        "InitialHeight": 145.0,
        "TextblockHeight": 159.0,
        "Background": "#FFB5B5B5"
      },
      {
        "Id": "547e9e447ad1416d8af0c1382a1be68c",
        "Title": "Change Viewport Type",
        "DescriptionText": "<Double click here to edit group description>",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "f132279cdf664efd89d7fe2ad64ab873",
          "03262b6775914ce2bc4a2b52ea649be4",
          "bef5cb9475ac46af8e9722bce6c0dbc9",
          "f3aecca83a9a48d4b2e409eedf950e0a",
          "59ad25546c3249658e2c360081bd99c5"
        ],
        "HasNestedGroups": false,
        "Left": 903.218566802549,
        "Top": 802.36704308577782,
        "Width": 790.38101958414768,
        "Height": 513.75243281204257,
        "FontSize": 36.0,
        "InitialTop": 875.36704308577782,
        "InitialHeight": 392.8556848997514,
        "TextblockHeight": 63.0,
        "Background": "#FFC1D676"
      }
    ],
    "X": -152.90286667652413,
    "Y": 204.1173745131174,
    "Zoom": 0.50570400812433314
  }
}