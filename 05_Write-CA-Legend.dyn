{
  "Uuid": "835f952c-e6fa-4cfc-8ced-085e223da08a",
  "IsCustomNode": false,
  "Description": "",
  "Name": "05_Write-CA-Legend",
  "ElementResolver": {
    "ResolutionMap": {}
  },
  "Inputs": [],
  "Outputs": [],
  "Nodes": [
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"DSP Comp Ref\";",
      "Id": "3a938488321347ab831291ade1c35e17",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "8af77140335f41e18d174df8ac0e5574",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\r\nclr.AddReference(\"RevitAPI\")\r\nclr.AddReference(\"RevitServices\")\r\nfrom Autodesk.Revit.DB import *\r\nfrom RevitServices.Persistence import DocumentManager\r\n\r\n# Inputs\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\n\r\n# Debugging step: check if input exists and its type\r\nif len(IN) < 1:\r\n    OUT = \"Error: Input list is empty. Please provide an input string for the legend name.\"\r\n    raise SystemExit\r\n\r\n# Attempt to retrieve the legend name, and handle if it fails\r\ntry:\r\n    legend_name = IN[0]\r\n    # Debugging: print input type and content to see what is being received\r\n    OUT = f\"Input received: Type = {type(legend_name)}, Content = {legend_name}\"\r\nexcept IndexError:\r\n    OUT = \"Error: Unable to read input from IN[0]. Please verify the input connection.\"\r\n    raise SystemExit\r\n\r\n# Ensure the input is of the correct type (str)\r\nif not isinstance(legend_name, str):\r\n    OUT = f\"Error: Input must be a string, received type {type(legend_name)}. Please use a string node.\"\r\n    raise SystemExit\r\n\r\n# Get all views in the document\r\ncollector = FilteredElementCollector(doc).OfClass(View)\r\n\r\n# Filter only Legend Views with the specified name\r\nspecific_legend = None\r\nfor view in collector:\r\n    if view.ViewType == ViewType.Legend and view.Name.strip() == legend_name.strip():\r\n        specific_legend = view\r\n        break\r\n\r\n# Check if the legend was found and output the result\r\nif specific_legend is None:\r\n    OUT = f\"Legend with name '{legend_name}' not found.\"\r\nelse:\r\n    OUT = specific_legend\r\n",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "9ad778fd162047ed81d4b937a126e37c",
      "Inputs": [
        {
          "Id": "16068f94dad24d9b8e86cf66242121ad",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "93d9b2a22db147c1a9d88d435429e845",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": true,
      "Id": "501b048d7d0d418093f6588230ae56b1",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "ad7a4d5ea57748d0856e6fa3ffa6acc0",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Selection between a true and false."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSVarArgFunction, DynamoCore",
      "FunctionSignature": "DSCore.String.Join@string,string[]",
      "FunctionType": "VariableArgument",
      "NodeType": "FunctionNode",
      "Id": "27d6a102833e4387957fb35a6cacf317",
      "Inputs": [
        {
          "Id": "fc64212e72d14417bab4e6dc6cf99a18",
          "Name": "separator",
          "Description": "String to be inserted between joined strings.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "0b739b4257104e7b8b9d3ca352e7293e",
          "Name": "string0",
          "Description": "Strings to be joined into a single string.\n\nstring[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "2fe93ddf962443598310de08bb3f6d11",
          "Name": "string",
          "Description": "A string made from the list of strings including the separator character.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Concatenates multiple strings into a single string, inserting the given separator between each joined string.\n\nString.Join (separator: string, strings: string[]): string"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSOffice.Data.ImportExcel@var,string,bool,bool",
      "Id": "19e77731cca74c5e95d753a61069d435",
      "Inputs": [
        {
          "Id": "1fd90d011ac04d8a86aad1ff79d5ebbd",
          "Name": "file",
          "Description": "File representing the Excel workbook\n\nvar",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "9841d70967194d6ea7cf5d78d326366a",
          "Name": "sheetName",
          "Description": "Name of the worksheet containing data\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "3f6e02ed2d7e4baba77ba1d1519697aa",
          "Name": "readAsStrings",
          "Description": "Toggle to read cells as strings\n\nbool\nDefault value : false",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "a7cbb22f15a94b8a8f5c36351af776d8",
          "Name": "showExcel",
          "Description": "Toggle to show excel's main window\n\nbool\nDefault value : true",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "ea2cd0d3a07944dd9ed531bf6b969614",
          "Name": "data",
          "Description": "Rows of data from the Excel worksheet",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Read data from a Microsoft Excel spreadsheet. Data is read by row and returned in a series of lists by row. Rows and columns are zero-indexed; for example, the value in cell A1 will appear in the data list at [0,0]. This node requires Microsoft Excel to be installed.\n\nData.ImportExcel (file: var, sheetName: string, readAsStrings: bool = false, showExcel: bool = true): var[][]"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.StringInput, CoreNodeModels",
      "NodeType": "StringInputNode",
      "InputValue": "CA",
      "Id": "63394fe975de4bd190db141f8a040e51",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "b74893368a73420b815b4d66aaef4e62",
          "Name": "",
          "Description": "String",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Creates a string."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.FileObject, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "47ecfcee36264a11a3fdb28b4233eb9b",
      "Inputs": [
        {
          "Id": "7ab0e259cfed4bd1b4e2a8b25d3bcc88",
          "Name": "path",
          "Description": "Path to the file.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "aac56490dcfc43ae9c0bb1682608c211",
          "Name": "file",
          "Description": "File object",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Creates a file object from a path."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSVarArgFunction, DynamoCore",
      "FunctionSignature": "DSCore.IO.FileSystem.CombinePath@string[]",
      "FunctionType": "VariableArgument",
      "NodeType": "FunctionNode",
      "Id": "70b12d9fb1834b9a89e5ed18da39e796",
      "Inputs": [
        {
          "Id": "f1bb329babe14c75ac36e4bcbb84267c",
          "Name": "string0",
          "Description": "Strings to combine into a path\n\nstring[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "fb1686ca102a44d48a0b31ec09d429da",
          "Name": "string1",
          "Description": "string[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "1778607a2a5243759031935e9ba9a93b",
          "Name": "string",
          "Description": "Combined file path",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Combines multiple strings into a single file path.\n\nFileSystem.CombinePath (strings: string[]): string"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"\\\\\";",
      "Id": "aeb5f99f742d430394e4b475037bd9b2",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "7d23fa33421743b39ddfeafa1108d46f",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSVarArgFunction, DynamoCore",
      "FunctionSignature": "DSCore.String.Join@string,string[]",
      "FunctionType": "VariableArgument",
      "NodeType": "FunctionNode",
      "Id": "2780564aeb9042b09cdece32b67d4aa1",
      "Inputs": [
        {
          "Id": "71e7b9fee17945e69121a7fa4d797a81",
          "Name": "separator",
          "Description": "String to be inserted between joined strings.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "9d6cce56c5584ec08cfec4609c95b79d",
          "Name": "string0",
          "Description": "Strings to be joined into a single string.\n\nstring[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "a1428efa0b1c420eb4491c7dabdb530d",
          "Name": "string",
          "Description": "A string made from the list of strings including the separator character.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Concatenates multiple strings into a single string, inserting the given separator between each joined string.\n\nString.Join (separator: string, strings: string[]): string"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"\\\\\";",
      "Id": "ed6e5ffec7b14ea882d70db0a0accc3d",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "c02ae76413dd4615a2b53c9a8bb600da",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.LastItem@var[]..[]",
      "Id": "f299887cf765427ba274a6960e077353",
      "Inputs": [
        {
          "Id": "a2c4acd75ba743b2bf013512a200c378",
          "Name": "list",
          "Description": "List to get the last item of\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "28a2c83a9f844dbaadf15f28948cca19",
          "Name": "item",
          "Description": "Last item in the list",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Retrieves the last item in a list.\n\nList.LastItem (list: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSVarArgFunction, DynamoCore",
      "FunctionSignature": "DSCore.String.Split@string,string[]",
      "FunctionType": "VariableArgument",
      "NodeType": "FunctionNode",
      "Id": "7f629a6390f74c5285a9c992ec3b6c75",
      "Inputs": [
        {
          "Id": "5e74f31659d14bb8bf4ad0e3a051f615",
          "Name": "string",
          "Description": "String to split up\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "4feff7ccfd384b97ae922279f0c684dc",
          "Name": "separator0",
          "Description": "Strings that, if present, determine the end and start of a split.\n\nstring[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "0fe7798f395747bcab3a7c06332ce12c",
          "Name": "strings",
          "Description": "List of strings made from the input string",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Divides a single string into a list of strings, with divisions determined by the given separator strings.\n\nString.Split (string: string, separators: string[]): string[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"\\\\\";",
      "Id": "50840014c7a24cc8905bbb65bfccfa35",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "a2c1b5a23508469693cd2ecb50e164c1",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "CoreNodeModels.FromObject, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "100500e5e8ca4c4f8074d092046414ff",
      "Inputs": [
        {
          "Id": "5cfa8fae9d524e6dbd372a756a8b92bd",
          "Name": "object",
          "Description": "Object to be serialized",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "52450eb6183d438587066cdde5fe45bc",
          "Name": "string",
          "Description": "String representation of the object",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Convert an object to a string representation."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "-1;",
      "Id": "732105eb9883459391d8ca2874a4a82f",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "f3bf1e127dc84392baac661761473675",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"\\\\\";",
      "Id": "b0310d183dcb4618864cee7982fc7783",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "4748ffee74eb4724a5379f0a1ad4ada3",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.DropItems@var[]..[],int",
      "Id": "3495deabb3564e158d4e4df9aad94c10",
      "Inputs": [
        {
          "Id": "0100a0a5ad754ece939ab5243e16584c",
          "Name": "list",
          "Description": "List to remove items from.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "827f32ac437f433f8e203b322c76a06b",
          "Name": "amount",
          "Description": "Amount of items to remove. If negative, items are removed from the end of the list.\n\nint",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "cf4818fcf1ce42a9bafa63de1f18f4dc",
          "Name": "list",
          "Description": "List of remaining items.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Removes an amount of items from the start of the list. If the amount is a negative value, items are removed from the end of the list.\n\nList.DropItems (list: var[]..[], amount: int): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSVarArgFunction, DynamoCore",
      "FunctionSignature": "DSCore.String.Split@string,string[]",
      "FunctionType": "VariableArgument",
      "NodeType": "FunctionNode",
      "Id": "c21f21ce35564f9c8d9e7940504655c6",
      "Inputs": [
        {
          "Id": "918fdbd7dfa2474ab0d4a4e6cd712eff",
          "Name": "string",
          "Description": "String to split up\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "035572c80e574e749c050f36688ef02e",
          "Name": "separator0",
          "Description": "Strings that, if present, determine the end and start of a split.\n\nstring[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "accd2a24d3124481bcc2e3d8a9cc4d85",
          "Name": "strings",
          "Description": "List of strings made from the input string",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Divides a single string into a list of strings, with divisions determined by the given separator strings.\n\nString.Split (string: string, separators: string[]): string[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSVarArgFunction, DynamoCore",
      "FunctionSignature": "DSCore.String.Join@string,string[]",
      "FunctionType": "VariableArgument",
      "NodeType": "FunctionNode",
      "Id": "680cca8619d44faeaee0da439d6b7eac",
      "Inputs": [
        {
          "Id": "09571e0f7cf745ad87f2e1cabc3c780a",
          "Name": "separator",
          "Description": "String to be inserted between joined strings.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "f5fcc6727f944c76bf17e26f900829ff",
          "Name": "string0",
          "Description": "Strings to be joined into a single string.\n\nstring[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "ae9881598b6948dea84c86b6f57dd586",
          "Name": "string",
          "Description": "A string made from the list of strings including the separator character.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Concatenates multiple strings into a single string, inserting the given separator between each joined string.\n\nString.Join (separator: string, strings: string[]): string"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Application.Document.FilePath",
      "Id": "b03b5de533ad46d1946cfb01737f875c",
      "Inputs": [
        {
          "Id": "71d3705deb2b48df81735c7e8ba6d4f5",
          "Name": "document",
          "Description": "Revit.Application.Document",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "249029be1c524fa1b7b7b28498bd195e",
          "Name": "string",
          "Description": "string",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "The full path of the Document.\n\nDocument.FilePath: string"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"\\\\\";",
      "Id": "2f837339110c4581999d12f7398f367f",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "b00aecc67a7f4f0288299bbab8ac278b",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.FileObject, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "e2490c25dbe547c5a580ce6d2157e0bc",
      "Inputs": [
        {
          "Id": "616c2a89234a45cf8ad8c8465235ba68",
          "Name": "path",
          "Description": "Path to the file.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "87602e2a5da5475f9512a05b6dbaf62c",
          "Name": "file",
          "Description": "File object",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Creates a file object from a path."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.Filename, CoreNodeModels",
      "HintPath": "C:\\_Albertsons\\x17 (Lineal Footage Analysis)\\Templates\\02_Master-Check.xlsx",
      "InputValue": "Templates\\02_Master-Check.xlsx",
      "NodeType": "ExtensionNode",
      "Id": "636651ca158d43f7a5f22b1311c67c41",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "19112b14ead441dca7ac21adcc4a4d7f",
          "Name": "",
          "Description": "File Path",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows you to select a file on the system to get its file path."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Application.Document.Current",
      "Id": "047a847b2d9445a08d05744b2e545025",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "caff3030cd304f7da798d75b9b7a7434",
          "Name": "Document",
          "Description": "Document",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get the current document\n\nDocument.Current: Document"
    },
    {
      "ConcreteType": "CoreNodeModels.Watch, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "1ab8c488dc8d449a867be35376a6604e",
      "Inputs": [
        {
          "Id": "8ac3815b8bf24755b57aede1b38300fd",
          "Name": "",
          "Description": "Node to show output from",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "6a6049ed83534ba9ba133d428397a497",
          "Name": "",
          "Description": "Node output",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Visualize the node's output"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\r\nclr.AddReference(\"RevitAPI\")\r\nclr.AddReference(\"RevitServices\")\r\nfrom Autodesk.Revit.DB import *\r\nfrom RevitServices.Persistence import DocumentManager\r\nimport re\r\n\r\n# Inputs\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nlegend_view = UnwrapElement(IN[0])  # Legend View input\r\ntarget_sub_header_text = IN[1]  # The sub-header text to extract (e.g., \"MULTI-DECK FROZEN FOOD\")\r\n\r\n# Collect all TextNote elements in the Legend View\r\ncollector = FilteredElementCollector(doc, legend_view.Id).OfClass(TextNote)\r\ntext_notes = []\r\n\r\nfor text_note in collector:\r\n    location = text_note.Coord  # XYZ location of the Text Note\r\n    element_data = {\r\n        \"ElementId\": text_note.Id.IntegerValue,\r\n        \"Text\": text_note.Text,\r\n        \"Location\": location\r\n    }\r\n    text_notes.append(element_data)\r\n\r\n# Preprocess the target text to remove extra whitespace and normalize line breaks\r\ntarget_sub_header_text_clean = re.sub(r'\\s+', ' ', target_sub_header_text.strip()).upper()\r\n\r\n# Group text notes by rows (based on Y-coordinate)\r\ntolerance = 0.1  # Tolerance for determining whether two text notes are in the same row\r\nrows = []\r\n\r\nfor text_note in text_notes:\r\n    y_coord = text_note[\"Location\"].Y\r\n    found_row = False\r\n    for row in rows:\r\n        if abs(row[0][\"Location\"].Y - y_coord) < tolerance:\r\n            row.append(text_note)\r\n            found_row = True\r\n            break\r\n    if not found_row:\r\n        rows.append([text_note])\r\n\r\n# Sort rows by Y-coordinate (descending order for top to bottom)\r\nsorted_rows = sorted(rows, key=lambda r: -r[0][\"Location\"].Y)\r\n\r\n# Sort elements within each row by X-coordinate (ascending order for left to right)\r\nfor row in sorted_rows:\r\n    row.sort(key=lambda e: e[\"Location\"].X)\r\n\r\n# Find the row that matches the target sub-header text\r\ntarget_row_data = None\r\n\r\nfor row in sorted_rows:\r\n    # Check each element in the row to find the target text\r\n    for element in row:\r\n        element_text_clean = re.sub(r'\\s+', ' ', element[\"Text\"].strip()).upper()\r\n        if element_text_clean == target_sub_header_text_clean:\r\n            target_row_data = row\r\n            break\r\n    if target_row_data:\r\n        break\r\n\r\n# Output the matched row (sub-header row)\r\nOUT = target_row_data\r\n",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "73c9b09e50bb4f1a860c600349c41e13",
      "Inputs": [
        {
          "Id": "424f7130fcbf41229f582c914f1ccee3",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "67909dc92e3d4d328c360d8c0ff467ee",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "8fd3002c053f47079f0de7f84cc4bd6f",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "CoreNodeModels.Watch, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "285b5387a3ff43529037ef0f868bb348",
      "Inputs": [
        {
          "Id": "d753b1112a11414792749c9f9f25973f",
          "Name": "",
          "Description": "Node to show output from",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "722e6612f1744f7e91c32354491d425a",
          "Name": "",
          "Description": "Node output",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Visualize the node's output"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"MULTI-DECK PRODUCE\";",
      "Id": "895a19fa868b492ebfc5ec6ac6ebfd70",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "376e5c20c2a64f42bb6706be57ffd549",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\r\nclr.AddReference(\"RevitAPI\")\r\nclr.AddReference(\"RevitServices\")\r\nfrom Autodesk.Revit.DB import *\r\nfrom RevitServices.Persistence import DocumentManager\r\nimport re\r\n\r\n# Inputs\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nlegend_view = UnwrapElement(IN[0])  # Legend View input\r\ntarget_sub_header_text = IN[1]  # The sub-header text to extract (e.g., \"MULTI-DECK FROZEN FOOD\")\r\n\r\n# Collect all TextNote elements in the Legend View\r\ncollector = FilteredElementCollector(doc, legend_view.Id).OfClass(TextNote)\r\ntext_notes = []\r\n\r\nfor text_note in collector:\r\n    location = text_note.Coord  # XYZ location of the Text Note\r\n    element_data = {\r\n        \"ElementId\": text_note.Id.IntegerValue,\r\n        \"Text\": text_note.Text,\r\n        \"Location\": location\r\n    }\r\n    text_notes.append(element_data)\r\n\r\n# Preprocess the target text to remove extra whitespace and normalize line breaks\r\ntarget_sub_header_text_clean = re.sub(r'\\s+', ' ', target_sub_header_text.strip()).upper()\r\n\r\n# Group text notes by rows (based on Y-coordinate)\r\ntolerance = 0.1  # Tolerance for determining whether two text notes are in the same row\r\nrows = []\r\n\r\nfor text_note in text_notes:\r\n    y_coord = text_note[\"Location\"].Y\r\n    found_row = False\r\n    for row in rows:\r\n        if abs(row[0][\"Location\"].Y - y_coord) < tolerance:\r\n            row.append(text_note)\r\n            found_row = True\r\n            break\r\n    if not found_row:\r\n        rows.append([text_note])\r\n\r\n# Sort rows by Y-coordinate (descending order for top to bottom)\r\nsorted_rows = sorted(rows, key=lambda r: -r[0][\"Location\"].Y)\r\n\r\n# Sort elements within each row by X-coordinate (ascending order for left to right)\r\nfor row in sorted_rows:\r\n    row.sort(key=lambda e: e[\"Location\"].X)\r\n\r\n# Find the row that matches the target sub-header text\r\ntarget_row_data = None\r\n\r\nfor row in sorted_rows:\r\n    # Check each element in the row to find the target text\r\n    for element in row:\r\n        element_text_clean = re.sub(r'\\s+', ' ', element[\"Text\"].strip()).upper()\r\n        if element_text_clean == target_sub_header_text_clean:\r\n            target_row_data = row\r\n            break\r\n    if target_row_data:\r\n        break\r\n\r\n# Output the matched row (sub-header row)\r\nOUT = target_row_data\r\n",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "158fe3300c874088b64cf09150e0618f",
      "Inputs": [
        {
          "Id": "1cacd9d1d0104208910c17f91b0b82f8",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "859ac191ef44439aaccbde733c1053d7",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "7ffd985e95cd41e299c047a0773e6cf1",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"MULTI-DECK MEAT DELI\";",
      "Id": "b241039a8e81427eb505a24044e6ca15",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "d05c05d837cf465691c46a7e480339a2",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\r\nclr.AddReference(\"RevitAPI\")\r\nclr.AddReference(\"RevitServices\")\r\nfrom Autodesk.Revit.DB import *\r\nfrom RevitServices.Persistence import DocumentManager\r\nimport re\r\n\r\n# Inputs\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nlegend_view = UnwrapElement(IN[0])  # Legend View input\r\ntarget_sub_header_text = IN[1]  # The sub-header text to extract (e.g., \"MULTI-DECK FROZEN FOOD\")\r\n\r\n# Collect all TextNote elements in the Legend View\r\ncollector = FilteredElementCollector(doc, legend_view.Id).OfClass(TextNote)\r\ntext_notes = []\r\n\r\nfor text_note in collector:\r\n    location = text_note.Coord  # XYZ location of the Text Note\r\n    element_data = {\r\n        \"ElementId\": text_note.Id.IntegerValue,\r\n        \"Text\": text_note.Text,\r\n        \"Location\": location\r\n    }\r\n    text_notes.append(element_data)\r\n\r\n# Preprocess the target text to remove extra whitespace and normalize line breaks\r\ntarget_sub_header_text_clean = re.sub(r'\\s+', ' ', target_sub_header_text.strip()).upper()\r\n\r\n# Group text notes by rows (based on Y-coordinate)\r\ntolerance = 0.1  # Tolerance for determining whether two text notes are in the same row\r\nrows = []\r\n\r\nfor text_note in text_notes:\r\n    y_coord = text_note[\"Location\"].Y\r\n    found_row = False\r\n    for row in rows:\r\n        if abs(row[0][\"Location\"].Y - y_coord) < tolerance:\r\n            row.append(text_note)\r\n            found_row = True\r\n            break\r\n    if not found_row:\r\n        rows.append([text_note])\r\n\r\n# Sort rows by Y-coordinate (descending order for top to bottom)\r\nsorted_rows = sorted(rows, key=lambda r: -r[0][\"Location\"].Y)\r\n\r\n# Sort elements within each row by X-coordinate (ascending order for left to right)\r\nfor row in sorted_rows:\r\n    row.sort(key=lambda e: e[\"Location\"].X)\r\n\r\n# Find the row that matches the target sub-header text\r\ntarget_row_data = None\r\n\r\nfor row in sorted_rows:\r\n    # Check each element in the row to find the target text\r\n    for element in row:\r\n        element_text_clean = re.sub(r'\\s+', ' ', element[\"Text\"].strip()).upper()\r\n        if element_text_clean == target_sub_header_text_clean:\r\n            target_row_data = row\r\n            break\r\n    if target_row_data:\r\n        break\r\n\r\n# Output the matched row (sub-header row)\r\nOUT = target_row_data\r\n",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "219dac865c4e4ac49bf83e60b654abdb",
      "Inputs": [
        {
          "Id": "f7040a41c5bd4b1db4c38004260845fb",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "7f5acc31bfb14b07abe635bd030e14f8",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "11a82d46fa774a3087393f732d3a6b3d",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"MULTI-DECK MEAT DELI\";",
      "Id": "34a3988ce124471f951c49e595d7bc53",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "8cfc272f21d54a82bc6babc9dc056776",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\r\nclr.AddReference(\"RevitAPI\")\r\nclr.AddReference(\"RevitServices\")\r\nfrom Autodesk.Revit.DB import *\r\nfrom RevitServices.Persistence import DocumentManager\r\nimport re\r\n\r\n# Inputs\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nlegend_view = UnwrapElement(IN[0])  # Legend View input\r\ntarget_sub_header_text = IN[1]  # The sub-header text to extract (e.g., \"MULTI-DECK FROZEN FOOD\")\r\n\r\n# Collect all TextNote elements in the Legend View\r\ncollector = FilteredElementCollector(doc, legend_view.Id).OfClass(TextNote)\r\ntext_notes = []\r\n\r\nfor text_note in collector:\r\n    location = text_note.Coord  # XYZ location of the Text Note\r\n    element_data = {\r\n        \"ElementId\": text_note.Id.IntegerValue,\r\n        \"Text\": text_note.Text,\r\n        \"Location\": location\r\n    }\r\n    text_notes.append(element_data)\r\n\r\n# Preprocess the target text to remove extra whitespace and normalize line breaks\r\ntarget_sub_header_text_clean = re.sub(r'\\s+', ' ', target_sub_header_text.strip()).upper()\r\n\r\n# Group text notes by rows (based on Y-coordinate)\r\ntolerance = 0.1  # Tolerance for determining whether two text notes are in the same row\r\nrows = []\r\n\r\nfor text_note in text_notes:\r\n    y_coord = text_note[\"Location\"].Y\r\n    found_row = False\r\n    for row in rows:\r\n        if abs(row[0][\"Location\"].Y - y_coord) < tolerance:\r\n            row.append(text_note)\r\n            found_row = True\r\n            break\r\n    if not found_row:\r\n        rows.append([text_note])\r\n\r\n# Sort rows by Y-coordinate (descending order for top to bottom)\r\nsorted_rows = sorted(rows, key=lambda r: -r[0][\"Location\"].Y)\r\n\r\n# Sort elements within each row by X-coordinate (ascending order for left to right)\r\nfor row in sorted_rows:\r\n    row.sort(key=lambda e: e[\"Location\"].X)\r\n\r\n# Find the row that matches the target sub-header text\r\ntarget_row_data = None\r\n\r\nfor row in sorted_rows:\r\n    # Check each element in the row to find the target text\r\n    for element in row:\r\n        element_text_clean = re.sub(r'\\s+', ' ', element[\"Text\"].strip()).upper()\r\n        if element_text_clean == target_sub_header_text_clean:\r\n            target_row_data = row\r\n            break\r\n    if target_row_data:\r\n        break\r\n\r\n# Output the matched row (sub-header row)\r\nOUT = target_row_data\r\n",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "2c180ec36e0245b7808a39b371ee0957",
      "Inputs": [
        {
          "Id": "6e451e5478a94e90ba3447190e89fe6e",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "a6c44b7733c74b74a427dee3c5d6f799",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "7bf60221f8244d6e98ba7943c988a7a4",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"TOTAL FROZEN FOOD\n(NUMBER OF DOORS)\";",
      "Id": "cc1ff340404c4c0da8366fd1cbc0d741",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "ba03bd4bb32945efbda2f116c0c979b3",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\r\nclr.AddReference(\"RevitAPI\")\r\nclr.AddReference(\"RevitServices\")\r\nfrom Autodesk.Revit.DB import *\r\nfrom RevitServices.Persistence import DocumentManager\r\nimport re\r\n\r\n# Inputs\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nlegend_view = UnwrapElement(IN[0])  # Legend View input\r\ntarget_sub_header_text = IN[1]  # The sub-header text to extract (e.g., \"MULTI-DECK FROZEN FOOD\")\r\n\r\n# Collect all TextNote elements in the Legend View\r\ncollector = FilteredElementCollector(doc, legend_view.Id).OfClass(TextNote)\r\ntext_notes = []\r\n\r\nfor text_note in collector:\r\n    location = text_note.Coord  # XYZ location of the Text Note\r\n    element_data = {\r\n        \"ElementId\": text_note.Id.IntegerValue,\r\n        \"Text\": text_note.Text,\r\n        \"Location\": location\r\n    }\r\n    text_notes.append(element_data)\r\n\r\n# Preprocess the target text to remove extra whitespace and normalize line breaks\r\ntarget_sub_header_text_clean = re.sub(r'\\s+', ' ', target_sub_header_text.strip()).upper()\r\n\r\n# Group text notes by rows (based on Y-coordinate)\r\ntolerance = 0.1  # Tolerance for determining whether two text notes are in the same row\r\nrows = []\r\n\r\nfor text_note in text_notes:\r\n    y_coord = text_note[\"Location\"].Y\r\n    found_row = False\r\n    for row in rows:\r\n        if abs(row[0][\"Location\"].Y - y_coord) < tolerance:\r\n            row.append(text_note)\r\n            found_row = True\r\n            break\r\n    if not found_row:\r\n        rows.append([text_note])\r\n\r\n# Sort rows by Y-coordinate (descending order for top to bottom)\r\nsorted_rows = sorted(rows, key=lambda r: -r[0][\"Location\"].Y)\r\n\r\n# Sort elements within each row by X-coordinate (ascending order for left to right)\r\nfor row in sorted_rows:\r\n    row.sort(key=lambda e: e[\"Location\"].X)\r\n\r\n# Find the row that matches the target sub-header text\r\ntarget_row_data = None\r\n\r\nfor row in sorted_rows:\r\n    # Check each element in the row to find the target text\r\n    for element in row:\r\n        element_text_clean = re.sub(r'\\s+', ' ', element[\"Text\"].strip()).upper()\r\n        if element_text_clean == target_sub_header_text_clean:\r\n            target_row_data = row\r\n            break\r\n    if target_row_data:\r\n        break\r\n\r\n# Output the matched row (sub-header row)\r\nOUT = target_row_data\r\n",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "faf87c64ac90437f86a6d3adcbfe672b",
      "Inputs": [
        {
          "Id": "0df789eb261d4d95a3ed88f4d239f067",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "4f2a5d9ec9c546ebadac6e18bd6c7d9b",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "3baa3b53edee4ed78c5bcfc2cedd77db",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"WINE / LIQUOR SHELVING\";",
      "Id": "b3a40c8b8b95415aa97e7c0e38806cc2",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "7d1b32703f0b4e7a87f156540f2b757f",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\r\nclr.AddReference(\"RevitAPI\")\r\nclr.AddReference(\"RevitServices\")\r\nfrom Autodesk.Revit.DB import *\r\nfrom RevitServices.Persistence import DocumentManager\r\nimport re\r\n\r\n# Inputs\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nlegend_view = UnwrapElement(IN[0])  # Legend View input\r\ntarget_sub_header_text = IN[1]  # The sub-header text to extract (e.g., \"MULTI-DECK FROZEN FOOD\")\r\n\r\n# Collect all TextNote elements in the Legend View\r\ncollector = FilteredElementCollector(doc, legend_view.Id).OfClass(TextNote)\r\ntext_notes = []\r\n\r\nfor text_note in collector:\r\n    location = text_note.Coord  # XYZ location of the Text Note\r\n    element_data = {\r\n        \"ElementId\": text_note.Id.IntegerValue,\r\n        \"Text\": text_note.Text,\r\n        \"Location\": location\r\n    }\r\n    text_notes.append(element_data)\r\n\r\n# Preprocess the target text to remove extra whitespace and normalize line breaks\r\ntarget_sub_header_text_clean = re.sub(r'\\s+', ' ', target_sub_header_text.strip()).upper()\r\n\r\n# Group text notes by rows (based on Y-coordinate)\r\ntolerance = 0.1  # Tolerance for determining whether two text notes are in the same row\r\nrows = []\r\n\r\nfor text_note in text_notes:\r\n    y_coord = text_note[\"Location\"].Y\r\n    found_row = False\r\n    for row in rows:\r\n        if abs(row[0][\"Location\"].Y - y_coord) < tolerance:\r\n            row.append(text_note)\r\n            found_row = True\r\n            break\r\n    if not found_row:\r\n        rows.append([text_note])\r\n\r\n# Sort rows by Y-coordinate (descending order for top to bottom)\r\nsorted_rows = sorted(rows, key=lambda r: -r[0][\"Location\"].Y)\r\n\r\n# Sort elements within each row by X-coordinate (ascending order for left to right)\r\nfor row in sorted_rows:\r\n    row.sort(key=lambda e: e[\"Location\"].X)\r\n\r\n# Find the row that matches the target sub-header text\r\ntarget_row_data = None\r\n\r\nfor row in sorted_rows:\r\n    # Check each element in the row to find the target text\r\n    for element in row:\r\n        element_text_clean = re.sub(r'\\s+', ' ', element[\"Text\"].strip()).upper()\r\n        if element_text_clean == target_sub_header_text_clean:\r\n            target_row_data = row\r\n            break\r\n    if target_row_data:\r\n        break\r\n\r\n# Output the matched row (sub-header row)\r\nOUT = target_row_data\r\n",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "70c746f883d345e099b213073de25bf3",
      "Inputs": [
        {
          "Id": "3c786a4ba56f4599b774fc5da1ab73a0",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "d83af7dfcdbc4dff93f092742ea5c8a9",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "f824f0104bfd4365bcfa9468171fffc7",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"CENTER STORE\";",
      "Id": "3439b7cae04146519c968d2a03532a01",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "1db683f1d4f54bd3a58bd766a1b4fc0b",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\r\nclr.AddReference(\"RevitAPI\")\r\nclr.AddReference(\"RevitServices\")\r\nfrom Autodesk.Revit.DB import *\r\nfrom RevitServices.Persistence import DocumentManager\r\nimport re\r\n\r\n# Inputs\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nlegend_view = UnwrapElement(IN[0])  # Legend View input\r\ntarget_sub_header_text = IN[1]  # The sub-header text to extract (e.g., \"MULTI-DECK FROZEN FOOD\")\r\n\r\n# Collect all TextNote elements in the Legend View\r\ncollector = FilteredElementCollector(doc, legend_view.Id).OfClass(TextNote)\r\ntext_notes = []\r\n\r\nfor text_note in collector:\r\n    location = text_note.Coord  # XYZ location of the Text Note\r\n    element_data = {\r\n        \"ElementId\": text_note.Id.IntegerValue,\r\n        \"Text\": text_note.Text,\r\n        \"Location\": location\r\n    }\r\n    text_notes.append(element_data)\r\n\r\n# Preprocess the target text to remove extra whitespace and normalize line breaks\r\ntarget_sub_header_text_clean = re.sub(r'\\s+', ' ', target_sub_header_text.strip()).upper()\r\n\r\n# Group text notes by rows (based on Y-coordinate)\r\ntolerance = 0.1  # Tolerance for determining whether two text notes are in the same row\r\nrows = []\r\n\r\nfor text_note in text_notes:\r\n    y_coord = text_note[\"Location\"].Y\r\n    found_row = False\r\n    for row in rows:\r\n        if abs(row[0][\"Location\"].Y - y_coord) < tolerance:\r\n            row.append(text_note)\r\n            found_row = True\r\n            break\r\n    if not found_row:\r\n        rows.append([text_note])\r\n\r\n# Sort rows by Y-coordinate (descending order for top to bottom)\r\nsorted_rows = sorted(rows, key=lambda r: -r[0][\"Location\"].Y)\r\n\r\n# Sort elements within each row by X-coordinate (ascending order for left to right)\r\nfor row in sorted_rows:\r\n    row.sort(key=lambda e: e[\"Location\"].X)\r\n\r\n# Find the row that matches the target sub-header text\r\ntarget_row_data = None\r\n\r\nfor row in sorted_rows:\r\n    # Check each element in the row to find the target text\r\n    for element in row:\r\n        element_text_clean = re.sub(r'\\s+', ' ', element[\"Text\"].strip()).upper()\r\n        if element_text_clean == target_sub_header_text_clean:\r\n            target_row_data = row\r\n            break\r\n    if target_row_data:\r\n        break\r\n\r\n# Output the matched row (sub-header row)\r\nOUT = target_row_data\r\n",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "83b8b14724844cf19fdfdf116d59ab16",
      "Inputs": [
        {
          "Id": "5fc406585d514424843479d7421c9818",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "befb23bc42b342218bfaba9841edea9e",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "4c2b3e37932744e6bfbd2f019aa94aaa",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"TOTAL SHELVING\";",
      "Id": "8783637cb75b4225804feecbec433590",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "8e3a139bc56a424791c0398c36924ebb",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\r\nclr.AddReference(\"RevitAPI\")\r\nclr.AddReference(\"RevitServices\")\r\nfrom Autodesk.Revit.DB import *\r\nfrom RevitServices.Persistence import DocumentManager\r\nimport re\r\n\r\n# Inputs\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nlegend_view = UnwrapElement(IN[0])  # Legend View input\r\ntarget_sub_header_text = IN[1]  # The sub-header text to extract (e.g., \"MULTI-DECK FROZEN FOOD\")\r\n\r\n# Collect all TextNote elements in the Legend View\r\ncollector = FilteredElementCollector(doc, legend_view.Id).OfClass(TextNote)\r\ntext_notes = []\r\n\r\nfor text_note in collector:\r\n    location = text_note.Coord  # XYZ location of the Text Note\r\n    element_data = {\r\n        \"ElementId\": text_note.Id.IntegerValue,\r\n        \"Text\": text_note.Text,\r\n        \"Location\": location\r\n    }\r\n    text_notes.append(element_data)\r\n\r\n# Preprocess the target text to remove extra whitespace and normalize line breaks\r\ntarget_sub_header_text_clean = re.sub(r'\\s+', ' ', target_sub_header_text.strip()).upper()\r\n\r\n# Group text notes by rows (based on Y-coordinate)\r\ntolerance = 0.1  # Tolerance for determining whether two text notes are in the same row\r\nrows = []\r\n\r\nfor text_note in text_notes:\r\n    y_coord = text_note[\"Location\"].Y\r\n    found_row = False\r\n    for row in rows:\r\n        if abs(row[0][\"Location\"].Y - y_coord) < tolerance:\r\n            row.append(text_note)\r\n            found_row = True\r\n            break\r\n    if not found_row:\r\n        rows.append([text_note])\r\n\r\n# Sort rows by Y-coordinate (descending order for top to bottom)\r\nsorted_rows = sorted(rows, key=lambda r: -r[0][\"Location\"].Y)\r\n\r\n# Sort elements within each row by X-coordinate (ascending order for left to right)\r\nfor row in sorted_rows:\r\n    row.sort(key=lambda e: e[\"Location\"].X)\r\n\r\n# Find the row that matches the target sub-header text\r\ntarget_row_data = None\r\n\r\nfor row in sorted_rows:\r\n    # Check each element in the row to find the target text\r\n    for element in row:\r\n        element_text_clean = re.sub(r'\\s+', ' ', element[\"Text\"].strip()).upper()\r\n        if element_text_clean == target_sub_header_text_clean:\r\n            target_row_data = row\r\n            break\r\n    if target_row_data:\r\n        break\r\n\r\n# Output the matched row (sub-header row)\r\nOUT = target_row_data\r\n",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "208b54a4a92e47c4b037eece2d74ced4",
      "Inputs": [
        {
          "Id": "eacdd1fc85ec4a08be03996e297a4aee",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "1ee1b63d7ef84abbb4dd160205f77c87",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "8b66e61801994449a3d6829ab9043361",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"MULTI-DECK FROZEN PROMO\";",
      "Id": "e8a5bcfd88254296abda623fa10b7087",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "47d56151416c424fb332d4ffb3d19fcb",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\r\nclr.AddReference(\"RevitAPI\")\r\nclr.AddReference(\"RevitServices\")\r\nfrom Autodesk.Revit.DB import *\r\nfrom RevitServices.Persistence import DocumentManager\r\nimport re\r\n\r\n# Inputs\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nlegend_view = UnwrapElement(IN[0])  # Legend View input\r\ntarget_sub_header_text = IN[1]  # The sub-header text to extract (e.g., \"MULTI-DECK FROZEN FOOD\")\r\n\r\n# Collect all TextNote elements in the Legend View\r\ncollector = FilteredElementCollector(doc, legend_view.Id).OfClass(TextNote)\r\ntext_notes = []\r\n\r\nfor text_note in collector:\r\n    location = text_note.Coord  # XYZ location of the Text Note\r\n    element_data = {\r\n        \"ElementId\": text_note.Id.IntegerValue,\r\n        \"Text\": text_note.Text,\r\n        \"Location\": location\r\n    }\r\n    text_notes.append(element_data)\r\n\r\n# Preprocess the target text to remove extra whitespace and normalize line breaks\r\ntarget_sub_header_text_clean = re.sub(r'\\s+', ' ', target_sub_header_text.strip()).upper()\r\n\r\n# Group text notes by rows (based on Y-coordinate)\r\ntolerance = 0.1  # Tolerance for determining whether two text notes are in the same row\r\nrows = []\r\n\r\nfor text_note in text_notes:\r\n    y_coord = text_note[\"Location\"].Y\r\n    found_row = False\r\n    for row in rows:\r\n        if abs(row[0][\"Location\"].Y - y_coord) < tolerance:\r\n            row.append(text_note)\r\n            found_row = True\r\n            break\r\n    if not found_row:\r\n        rows.append([text_note])\r\n\r\n# Sort rows by Y-coordinate (descending order for top to bottom)\r\nsorted_rows = sorted(rows, key=lambda r: -r[0][\"Location\"].Y)\r\n\r\n# Sort elements within each row by X-coordinate (ascending order for left to right)\r\nfor row in sorted_rows:\r\n    row.sort(key=lambda e: e[\"Location\"].X)\r\n\r\n# Find the row that matches the target sub-header text\r\ntarget_row_data = None\r\n\r\nfor row in sorted_rows:\r\n    # Check each element in the row to find the target text\r\n    for element in row:\r\n        element_text_clean = re.sub(r'\\s+', ' ', element[\"Text\"].strip()).upper()\r\n        if element_text_clean == target_sub_header_text_clean:\r\n            target_row_data = row\r\n            break\r\n    if target_row_data:\r\n        break\r\n\r\n# Output the matched row (sub-header row)\r\nOUT = target_row_data\r\n",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "d6182a2d8bcc4627937619d968935160",
      "Inputs": [
        {
          "Id": "662ea279bd074a3ab7253cb22ba150ee",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "7349413cc9fd4ee2b2db407a2a1e7881",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "47354b850d0c46d887996e34c6028607",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"MULTI-DECK SEAFOOD & MEAT\";",
      "Id": "3f0262d8bdb14c2c8cfe40a685b20d4a",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "50a575ef92884c5d9ebdcdfa0fa58ec6",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\r\nclr.AddReference(\"RevitAPI\")\r\nclr.AddReference(\"RevitServices\")\r\nfrom Autodesk.Revit.DB import *\r\nfrom RevitServices.Persistence import DocumentManager\r\nimport re\r\n\r\n# Inputs\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nlegend_view = UnwrapElement(IN[0])  # Legend View input\r\ntarget_sub_header_text = IN[1]  # The sub-header text to extract (e.g., \"MULTI-DECK FROZEN FOOD\")\r\n\r\n# Collect all TextNote elements in the Legend View\r\ncollector = FilteredElementCollector(doc, legend_view.Id).OfClass(TextNote)\r\ntext_notes = []\r\n\r\nfor text_note in collector:\r\n    location = text_note.Coord  # XYZ location of the Text Note\r\n    element_data = {\r\n        \"ElementId\": text_note.Id.IntegerValue,\r\n        \"Text\": text_note.Text,\r\n        \"Location\": location\r\n    }\r\n    text_notes.append(element_data)\r\n\r\n# Preprocess the target text to remove extra whitespace and normalize line breaks\r\ntarget_sub_header_text_clean = re.sub(r'\\s+', ' ', target_sub_header_text.strip()).upper()\r\n\r\n# Group text notes by rows (based on Y-coordinate)\r\ntolerance = 0.1  # Tolerance for determining whether two text notes are in the same row\r\nrows = []\r\n\r\nfor text_note in text_notes:\r\n    y_coord = text_note[\"Location\"].Y\r\n    found_row = False\r\n    for row in rows:\r\n        if abs(row[0][\"Location\"].Y - y_coord) < tolerance:\r\n            row.append(text_note)\r\n            found_row = True\r\n            break\r\n    if not found_row:\r\n        rows.append([text_note])\r\n\r\n# Sort rows by Y-coordinate (descending order for top to bottom)\r\nsorted_rows = sorted(rows, key=lambda r: -r[0][\"Location\"].Y)\r\n\r\n# Sort elements within each row by X-coordinate (ascending order for left to right)\r\nfor row in sorted_rows:\r\n    row.sort(key=lambda e: e[\"Location\"].X)\r\n\r\n# Find the row that matches the target sub-header text\r\ntarget_row_data = None\r\n\r\nfor row in sorted_rows:\r\n    # Check each element in the row to find the target text\r\n    for element in row:\r\n        element_text_clean = re.sub(r'\\s+', ' ', element[\"Text\"].strip()).upper()\r\n        if element_text_clean == target_sub_header_text_clean:\r\n            target_row_data = row\r\n            break\r\n    if target_row_data:\r\n        break\r\n\r\n# Output the matched row (sub-header row)\r\nOUT = target_row_data\r\n",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "57c53797855c4931996cee0badb4c193",
      "Inputs": [
        {
          "Id": "44d89c51e179479c8b3864a58be27178",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "09a8b641b49146f698a8b167d4b72cf7",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "c5f95fda92824406b8b2c0d26acff342",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"MULTI-DECK FROZEN FOOD\";",
      "Id": "0b90f619fc0f4292b3205be94b6c7a71",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "93a2fbcad8424170a84b8862589fb677",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\r\nclr.AddReference(\"RevitAPI\")\r\nclr.AddReference(\"RevitServices\")\r\nfrom Autodesk.Revit.DB import *\r\nfrom RevitServices.Persistence import DocumentManager\r\nimport re\r\n\r\n# Inputs\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nlegend_view = UnwrapElement(IN[0])  # Legend View input\r\ntarget_sub_header_text = IN[1]  # The sub-header text to extract (e.g., \"MULTI-DECK FROZEN FOOD\")\r\n\r\n# Collect all TextNote elements in the Legend View\r\ncollector = FilteredElementCollector(doc, legend_view.Id).OfClass(TextNote)\r\ntext_notes = []\r\n\r\nfor text_note in collector:\r\n    location = text_note.Coord  # XYZ location of the Text Note\r\n    element_data = {\r\n        \"ElementId\": text_note.Id.IntegerValue,\r\n        \"Text\": text_note.Text,\r\n        \"Location\": location\r\n    }\r\n    text_notes.append(element_data)\r\n\r\n# Preprocess the target text to remove extra whitespace and normalize line breaks\r\ntarget_sub_header_text_clean = re.sub(r'\\s+', ' ', target_sub_header_text.strip()).upper()\r\n\r\n# Group text notes by rows (based on Y-coordinate)\r\ntolerance = 0.1  # Tolerance for determining whether two text notes are in the same row\r\nrows = []\r\n\r\nfor text_note in text_notes:\r\n    y_coord = text_note[\"Location\"].Y\r\n    found_row = False\r\n    for row in rows:\r\n        if abs(row[0][\"Location\"].Y - y_coord) < tolerance:\r\n            row.append(text_note)\r\n            found_row = True\r\n            break\r\n    if not found_row:\r\n        rows.append([text_note])\r\n\r\n# Sort rows by Y-coordinate (descending order for top to bottom)\r\nsorted_rows = sorted(rows, key=lambda r: -r[0][\"Location\"].Y)\r\n\r\n# Sort elements within each row by X-coordinate (ascending order for left to right)\r\nfor row in sorted_rows:\r\n    row.sort(key=lambda e: e[\"Location\"].X)\r\n\r\n# Find the row that matches the target sub-header text\r\ntarget_row_data = None\r\n\r\nfor row in sorted_rows:\r\n    # Check each element in the row to find the target text\r\n    for element in row:\r\n        element_text_clean = re.sub(r'\\s+', ' ', element[\"Text\"].strip()).upper()\r\n        if element_text_clean == target_sub_header_text_clean:\r\n            target_row_data = row\r\n            break\r\n    if target_row_data:\r\n        break\r\n\r\n# Output the matched row (sub-header row)\r\nOUT = target_row_data\r\n",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "fcdb6fdcacce4f849b104b238d2f9079",
      "Inputs": [
        {
          "Id": "a917354c928345388cdfa0144c8773d8",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "e65cfefae1aa4dbaaf0c3ad21c31f696",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "4e07d8ebcbfc404c99b536ce94856ed8",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"MULTI-DECK MEAT DELI\";",
      "Id": "9f8a12cfa0114077b58d919ddee0c3ce",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "71156d903df34375bcfcc8caf5ab824d",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\r\nclr.AddReference(\"RevitAPI\")\r\nclr.AddReference(\"RevitServices\")\r\nfrom Autodesk.Revit.DB import *\r\nfrom RevitServices.Persistence import DocumentManager\r\nimport re\r\n\r\n# Inputs\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nlegend_view = UnwrapElement(IN[0])  # Legend View input\r\ntarget_sub_header_text = IN[1]  # The sub-header text to extract (e.g., \"MULTI-DECK FROZEN FOOD\")\r\n\r\n# Collect all TextNote elements in the Legend View\r\ncollector = FilteredElementCollector(doc, legend_view.Id).OfClass(TextNote)\r\ntext_notes = []\r\n\r\nfor text_note in collector:\r\n    location = text_note.Coord  # XYZ location of the Text Note\r\n    element_data = {\r\n        \"ElementId\": text_note.Id.IntegerValue,\r\n        \"Text\": text_note.Text,\r\n        \"Location\": location\r\n    }\r\n    text_notes.append(element_data)\r\n\r\n# Preprocess the target text to remove extra whitespace and normalize line breaks\r\ntarget_sub_header_text_clean = re.sub(r'\\s+', ' ', target_sub_header_text.strip()).upper()\r\n\r\n# Group text notes by rows (based on Y-coordinate)\r\ntolerance = 0.1  # Tolerance for determining whether two text notes are in the same row\r\nrows = []\r\n\r\nfor text_note in text_notes:\r\n    y_coord = text_note[\"Location\"].Y\r\n    found_row = False\r\n    for row in rows:\r\n        if abs(row[0][\"Location\"].Y - y_coord) < tolerance:\r\n            row.append(text_note)\r\n            found_row = True\r\n            break\r\n    if not found_row:\r\n        rows.append([text_note])\r\n\r\n# Sort rows by Y-coordinate (descending order for top to bottom)\r\nsorted_rows = sorted(rows, key=lambda r: -r[0][\"Location\"].Y)\r\n\r\n# Sort elements within each row by X-coordinate (ascending order for left to right)\r\nfor row in sorted_rows:\r\n    row.sort(key=lambda e: e[\"Location\"].X)\r\n\r\n# Find the row that matches the target sub-header text\r\ntarget_row_data = None\r\n\r\nfor row in sorted_rows:\r\n    # Check each element in the row to find the target text\r\n    for element in row:\r\n        element_text_clean = re.sub(r'\\s+', ' ', element[\"Text\"].strip()).upper()\r\n        if element_text_clean == target_sub_header_text_clean:\r\n            target_row_data = row\r\n            break\r\n    if target_row_data:\r\n        break\r\n\r\n# Output the matched row (sub-header row)\r\nOUT = target_row_data\r\n",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "fc1aca49769d4debb80087cae2b454f4",
      "Inputs": [
        {
          "Id": "d9d3529b4f63477ea379d1521974fe34",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "1e301d1b9acd476fbbe686961023aef6",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "22e506486f974117833850df0c6e70e2",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"MULTI-DECK MEAT DELI\";",
      "Id": "c66f92da073741d985d9adc48625e8d6",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "33211f5def1840e490839fd1bca78761",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\r\nclr.AddReference(\"RevitAPI\")\r\nclr.AddReference(\"RevitServices\")\r\nfrom Autodesk.Revit.DB import *\r\nfrom RevitServices.Persistence import DocumentManager\r\nimport re\r\n\r\n# Inputs\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nlegend_view = UnwrapElement(IN[0])  # Legend View input\r\ntarget_sub_header_text = IN[1]  # The sub-header text to extract (e.g., \"MULTI-DECK FROZEN FOOD\")\r\n\r\n# Collect all TextNote elements in the Legend View\r\ncollector = FilteredElementCollector(doc, legend_view.Id).OfClass(TextNote)\r\ntext_notes = []\r\n\r\nfor text_note in collector:\r\n    location = text_note.Coord  # XYZ location of the Text Note\r\n    element_data = {\r\n        \"ElementId\": text_note.Id.IntegerValue,\r\n        \"Text\": text_note.Text,\r\n        \"Location\": location\r\n    }\r\n    text_notes.append(element_data)\r\n\r\n# Preprocess the target text to remove extra whitespace and normalize line breaks\r\ntarget_sub_header_text_clean = re.sub(r'\\s+', ' ', target_sub_header_text.strip()).upper()\r\n\r\n# Group text notes by rows (based on Y-coordinate)\r\ntolerance = 0.1  # Tolerance for determining whether two text notes are in the same row\r\nrows = []\r\n\r\nfor text_note in text_notes:\r\n    y_coord = text_note[\"Location\"].Y\r\n    found_row = False\r\n    for row in rows:\r\n        if abs(row[0][\"Location\"].Y - y_coord) < tolerance:\r\n            row.append(text_note)\r\n            found_row = True\r\n            break\r\n    if not found_row:\r\n        rows.append([text_note])\r\n\r\n# Sort rows by Y-coordinate (descending order for top to bottom)\r\nsorted_rows = sorted(rows, key=lambda r: -r[0][\"Location\"].Y)\r\n\r\n# Sort elements within each row by X-coordinate (ascending order for left to right)\r\nfor row in sorted_rows:\r\n    row.sort(key=lambda e: e[\"Location\"].X)\r\n\r\n# Find the row that matches the target sub-header text\r\ntarget_row_data = None\r\n\r\nfor row in sorted_rows:\r\n    # Check each element in the row to find the target text\r\n    for element in row:\r\n        element_text_clean = re.sub(r'\\s+', ' ', element[\"Text\"].strip()).upper()\r\n        if element_text_clean == target_sub_header_text_clean:\r\n            target_row_data = row\r\n            break\r\n    if target_row_data:\r\n        break\r\n\r\n# Output the matched row (sub-header row)\r\nOUT = target_row_data\r\n",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "311ec44902cd41258169dfd7ba5dceb3",
      "Inputs": [
        {
          "Id": "963c99216cc243aaa1394dbf17da848f",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "131207cb64e14b34917ba2898077befd",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "b4de15d113c74991ae7fb03cdd8b77c0",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"DAIRY COOLER DOORS\n(DOOR QTY x 2.5)\";",
      "Id": "d461cb57a48c4fb2aa2830708fa87b7f",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "4bdef30e9fe842528da7c00c12d38bae",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\r\nclr.AddReference(\"RevitAPI\")\r\nclr.AddReference(\"RevitServices\")\r\nfrom Autodesk.Revit.DB import *\r\nfrom RevitServices.Persistence import DocumentManager\r\nimport re\r\n\r\n# Inputs\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nlegend_view = UnwrapElement(IN[0])  # Legend View input\r\ntarget_sub_header_text = IN[1]  # The sub-header text to extract (e.g., \"MULTI-DECK FROZEN FOOD\")\r\n\r\n# Collect all TextNote elements in the Legend View\r\ncollector = FilteredElementCollector(doc, legend_view.Id).OfClass(TextNote)\r\ntext_notes = []\r\n\r\nfor text_note in collector:\r\n    location = text_note.Coord  # XYZ location of the Text Note\r\n    element_data = {\r\n        \"ElementId\": text_note.Id.IntegerValue,\r\n        \"Text\": text_note.Text,\r\n        \"Location\": location\r\n    }\r\n    text_notes.append(element_data)\r\n\r\n# Preprocess the target text to remove extra whitespace and normalize line breaks\r\ntarget_sub_header_text_clean = re.sub(r'\\s+', ' ', target_sub_header_text.strip()).upper()\r\n\r\n# Group text notes by rows (based on Y-coordinate)\r\ntolerance = 0.1  # Tolerance for determining whether two text notes are in the same row\r\nrows = []\r\n\r\nfor text_note in text_notes:\r\n    y_coord = text_note[\"Location\"].Y\r\n    found_row = False\r\n    for row in rows:\r\n        if abs(row[0][\"Location\"].Y - y_coord) < tolerance:\r\n            row.append(text_note)\r\n            found_row = True\r\n            break\r\n    if not found_row:\r\n        rows.append([text_note])\r\n\r\n# Sort rows by Y-coordinate (descending order for top to bottom)\r\nsorted_rows = sorted(rows, key=lambda r: -r[0][\"Location\"].Y)\r\n\r\n# Sort elements within each row by X-coordinate (ascending order for left to right)\r\nfor row in sorted_rows:\r\n    row.sort(key=lambda e: e[\"Location\"].X)\r\n\r\n# Find the row that matches the target sub-header text\r\ntarget_row_data = None\r\n\r\nfor row in sorted_rows:\r\n    # Check each element in the row to find the target text\r\n    for element in row:\r\n        element_text_clean = re.sub(r'\\s+', ' ', element[\"Text\"].strip()).upper()\r\n        if element_text_clean == target_sub_header_text_clean:\r\n            target_row_data = row\r\n            break\r\n    if target_row_data:\r\n        break\r\n\r\n# Output the matched row (sub-header row)\r\nOUT = target_row_data\r\n",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "8f27b398eea74dca853a9cc87bdb9816",
      "Inputs": [
        {
          "Id": "0a14875a1f714971ba13ba25945dc1b1",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "aea25ae4bd5a4142a484b67101cbf4d0",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "125bb003c421474eab9a5c6fd155df72",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"MULTI-DECK DAIRY\";",
      "Id": "f9b7a517877f40c39a94e6897ef1b640",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "3485a47a6c32419397a119c4166ef680",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "CoreNodeModels.Watch, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "228d0d19a1374cc5b8f862884ea938fe",
      "Inputs": [
        {
          "Id": "62568bdb00b94c0fb7202781e3d5316a",
          "Name": "",
          "Description": "Node to show output from",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "20403a820925492d9594d1adb8353c3d",
          "Name": "",
          "Description": "Node output",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Visualize the node's output"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\r\nclr.AddReference(\"RevitAPI\")\r\nclr.AddReference(\"RevitServices\")\r\nfrom Autodesk.Revit.DB import *\r\nfrom RevitServices.Persistence import DocumentManager\r\nimport re\r\n\r\n# Inputs\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nlegend_view = UnwrapElement(IN[0])  # Legend View input\r\ntarget_sub_header_text = IN[1]  # The sub-header text to extract (e.g., \"MULTI-DECK FROZEN FOOD\")\r\n\r\n# Collect all TextNote elements in the Legend View\r\ncollector = FilteredElementCollector(doc, legend_view.Id).OfClass(TextNote)\r\ntext_notes = []\r\n\r\nfor text_note in collector:\r\n    location = text_note.Coord  # XYZ location of the Text Note\r\n    element_data = {\r\n        \"ElementId\": text_note.Id.IntegerValue,\r\n        \"Text\": text_note.Text,\r\n        \"Location\": location\r\n    }\r\n    text_notes.append(element_data)\r\n\r\n# Preprocess the target text to remove extra whitespace and normalize line breaks\r\ntarget_sub_header_text_clean = re.sub(r'\\s+', ' ', target_sub_header_text.strip()).upper()\r\n\r\n# Group text notes by rows (based on Y-coordinate)\r\ntolerance = 0.1  # Tolerance for determining whether two text notes are in the same row\r\nrows = []\r\n\r\nfor text_note in text_notes:\r\n    y_coord = text_note[\"Location\"].Y\r\n    found_row = False\r\n    for row in rows:\r\n        if abs(row[0][\"Location\"].Y - y_coord) < tolerance:\r\n            row.append(text_note)\r\n            found_row = True\r\n            break\r\n    if not found_row:\r\n        rows.append([text_note])\r\n\r\n# Sort rows by Y-coordinate (descending order for top to bottom)\r\nsorted_rows = sorted(rows, key=lambda r: -r[0][\"Location\"].Y)\r\n\r\n# Sort elements within each row by X-coordinate (ascending order for left to right)\r\nfor row in sorted_rows:\r\n    row.sort(key=lambda e: e[\"Location\"].X)\r\n\r\n# Find the row that matches the target sub-header text\r\ntarget_row_data = None\r\n\r\nfor row in sorted_rows:\r\n    # Check each element in the row to find the target text\r\n    for element in row:\r\n        element_text_clean = re.sub(r'\\s+', ' ', element[\"Text\"].strip()).upper()\r\n        if element_text_clean == target_sub_header_text_clean:\r\n            target_row_data = row\r\n            break\r\n    if target_row_data:\r\n        break\r\n\r\n# Output the matched row (sub-header row)\r\nOUT = target_row_data\r\n",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "7780b1378bbb4dcfbd34b5a81abf7a88",
      "Inputs": [
        {
          "Id": "59cf80af784f4902a8387344c7c7108c",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "ad9713e294ef4eb0a1df5a084082b2f7",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "027c3189f57b4188a3e95c3b8d1d1487",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"MULTI-DECK MEAT\";",
      "Id": "d619319848c64235a3f11c9bbb3d0865",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "cd41aeaa8f7c47a1ba232dc9587d3926",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\r\nclr.AddReference(\"RevitAPI\")\r\nclr.AddReference(\"RevitServices\")\r\nfrom Autodesk.Revit.DB import *\r\nfrom RevitServices.Persistence import DocumentManager\r\nimport re\r\n\r\n# Inputs\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nlegend_view = UnwrapElement(IN[0])  # Legend View input\r\ntarget_sub_header_text = IN[1]  # The sub-header text to extract (e.g., \"MULTI-DECK FROZEN FOOD\")\r\n\r\n# Collect all TextNote elements in the Legend View\r\ncollector = FilteredElementCollector(doc, legend_view.Id).OfClass(TextNote)\r\ntext_notes = []\r\n\r\nfor text_note in collector:\r\n    location = text_note.Coord  # XYZ location of the Text Note\r\n    element_data = {\r\n        \"ElementId\": text_note.Id.IntegerValue,\r\n        \"Text\": text_note.Text,\r\n        \"Location\": location\r\n    }\r\n    text_notes.append(element_data)\r\n\r\n# Preprocess the target text to remove extra whitespace and normalize line breaks\r\ntarget_sub_header_text_clean = re.sub(r'\\s+', ' ', target_sub_header_text.strip()).upper()\r\n\r\n# Group text notes by rows (based on Y-coordinate)\r\ntolerance = 0.1  # Tolerance for determining whether two text notes are in the same row\r\nrows = []\r\n\r\nfor text_note in text_notes:\r\n    y_coord = text_note[\"Location\"].Y\r\n    found_row = False\r\n    for row in rows:\r\n        if abs(row[0][\"Location\"].Y - y_coord) < tolerance:\r\n            row.append(text_note)\r\n            found_row = True\r\n            break\r\n    if not found_row:\r\n        rows.append([text_note])\r\n\r\n# Sort rows by Y-coordinate (descending order for top to bottom)\r\nsorted_rows = sorted(rows, key=lambda r: -r[0][\"Location\"].Y)\r\n\r\n# Sort elements within each row by X-coordinate (ascending order for left to right)\r\nfor row in sorted_rows:\r\n    row.sort(key=lambda e: e[\"Location\"].X)\r\n\r\n# Find the row that matches the target sub-header text\r\ntarget_row_data = None\r\n\r\nfor row in sorted_rows:\r\n    # Check each element in the row to find the target text\r\n    for element in row:\r\n        element_text_clean = re.sub(r'\\s+', ' ', element[\"Text\"].strip()).upper()\r\n        if element_text_clean == target_sub_header_text_clean:\r\n            target_row_data = row\r\n            break\r\n    if target_row_data:\r\n        break\r\n\r\n# Output the matched row (sub-header row)\r\nOUT = target_row_data\r\n",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "a08244fc71484def9724cd7ee39a6b3a",
      "Inputs": [
        {
          "Id": "396e373a689e48fbb711329ac8ba4e1a",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "8543805b15dc46c6808b1e93196a2e3f",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "6284ff89bb1a4990a73efae1caaba60b",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"SERVICE SEAFOOD & MEAT\";",
      "Id": "902790c34aa24395a0bc7a3f243e6e87",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "db269162b1504f498bfb827829338793",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "CoreNodeModels.Watch, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "c4b45831aafd469d82914a31b3203d01",
      "Inputs": [
        {
          "Id": "5d870af658fe41e2a5aee19a3cfa06d7",
          "Name": "",
          "Description": "Node to show output from",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "300c5289399a4b8c9f3b2fadc132f87b",
          "Name": "",
          "Description": "Node output",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Visualize the node's output"
    },
    {
      "ConcreteType": "CoreNodeModels.Watch, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "e49a7b1567b3401984f7573a8509bcb8",
      "Inputs": [
        {
          "Id": "5b82fb41a164447b8b88ed74c8c42619",
          "Name": "",
          "Description": "Node to show output from",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "cceb9ac6422d4f9984e36ec5e28fca4d",
          "Name": "",
          "Description": "Node output",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Visualize the node's output"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import re\r\n\r\n# Input from Excel Import Node\r\nexcel_data = IN[0]  # Input Excel data (deeply nested structure)\r\ntarget_sub_header_text = IN[1]  # The sub-header text we are looking for\r\n\r\n# Clean the target text to remove extra spaces, normalize line breaks, and convert to upper case\r\ntarget_sub_header_text_clean = re.sub(r'\\s+', ' ', target_sub_header_text.strip()).upper()\r\n\r\noutput_data = []\r\n\r\n# Function to flatten nested lists\r\ndef flatten_list(data):\r\n    flat_list = []\r\n    if isinstance(data, list):\r\n        for item in data:\r\n            flat_list.extend(flatten_list(item))\r\n    else:\r\n        flat_list.append(data)\r\n    return flat_list\r\n\r\n# Flatten the deeply nested list structure to access the actual rows\r\nflattened_data = flatten_list(excel_data)\r\n\r\n# Iterate through the flattened data to find rows (each row is a list)\r\nfor row in flattened_data:\r\n    if isinstance(row, list) and len(row) >= 2:\r\n        subcategory = row[1]\r\n\r\n        # Check if the subcategory is a string and is not None\r\n        if subcategory is not None and isinstance(subcategory, str):\r\n            # Normalize the text for consistent comparison\r\n            subcategory_clean = re.sub(r'\\s+', ' ', subcategory.strip()).upper()\r\n\r\n            # Debugging: Print the cleaned sub-header to see exactly what we are matching\r\n            print(f\"Sub-Header in Row: '{subcategory_clean}'\")\r\n            print(f\"Target Sub-Header: '{target_sub_header_text_clean}'\")\r\n\r\n            # Final matching check\r\n            if target_sub_header_text_clean == subcategory_clean:\r\n                output_data = row\r\n                break\r\n\r\n# Output the transformed data focusing on the specific sub-header\r\nOUT = output_data if output_data else f\"No matching sub-header found for: '{target_sub_header_text_clean}'\"\r\n",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "8026e15f504041d6bdead0d32f5b556f",
      "Inputs": [
        {
          "Id": "1bff890179274f178bd12b64c7434192",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "6ac2457ba1c241eebdb828ead64db507",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "dd156cd526d24171ac4771b7f8cbae52",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "CoreNodeModels.Watch, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "b6d350babd7c4f11a2a0b3b9e7d6c20c",
      "Inputs": [
        {
          "Id": "4338b34ac47b42e09a03bc436a211e0d",
          "Name": "",
          "Description": "Node to show output from",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "498f679da0df48c8963af546a0adcc76",
          "Name": "",
          "Description": "Node output",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Visualize the node's output"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Input from Excel Import Node (flattened data)\r\nexcel_data = IN[0]\r\n\r\n# Initialize an empty list to hold the dictionaries\r\ndictionary_rows = []\r\n\r\ntry:\r\n    # Iterate through each row in the Excel data\r\n    for row in excel_data:\r\n        # Ensure row is a list and has meaningful data in the first six fields (Header, SubHeader, Type, Existing, Proposed, Variation)\r\n        if isinstance(row, list) and len(row) >= 6:\r\n            # Extract and format the required data, providing sensible default values where necessary\r\n            header = row[0] if row[0] is not None else \"N/A\"\r\n            sub_header = row[1] if row[1] is not None else \"N/A\"\r\n            item_type = row[2] if row[2] is not None else \"N/A\"\r\n            existing = row[3] if row[3] is not None else 0\r\n            proposed = row[4] if row[4] is not None else 0\r\n            variation = row[5] if row[5] is not None else 0\r\n\r\n            # Only include rows with meaningful sub-header data (ignore entirely empty rows)\r\n            if sub_header != \"N/A\":\r\n                # Create a dictionary for the row\r\n                row_dict = {\r\n                    \"Header\": header,\r\n                    \"SubHeader\": sub_header,\r\n                    \"Type\": item_type,\r\n                    \"Existing\": existing,\r\n                    \"Proposed\": proposed,\r\n                    \"Variation\": variation\r\n                }\r\n\r\n                # Append the dictionary to the list\r\n                dictionary_rows.append(row_dict)\r\n\r\n    # Set output to the list of dictionaries\r\n    if not dictionary_rows:\r\n        OUT = \"No valid rows found in input data. Check the structure of the input or revise the extraction logic.\"\r\n    else:\r\n        OUT = dictionary_rows\r\n\r\nexcept Exception as e:\r\n    # Output any errors that occur\r\n    OUT = \"Error occurred: {}\".format(str(e))\r\n",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "e5f5d610811f4f8daf532fe9f38b697c",
      "Inputs": [
        {
          "Id": "714d4356e8274c5cb0c272dd6ec963ac",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "35abbe63f2e645b2a01454fe79512e42",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "CoreNodeModels.Watch, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "8d8005d6fd9a434a837aeabb22cfa0d4",
      "Inputs": [
        {
          "Id": "d0763419b62849e1be01fc770e4fd191",
          "Name": "",
          "Description": "Node to show output from",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "6ebaac9622054c8f86738a7c80418091",
          "Name": "",
          "Description": "Node output",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Visualize the node's output"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": true,
      "Id": "f52a7c506bf94bb0b3198b293812443d",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "db2df4cecb3749418cfee6413da03b27",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Selection between a true and false."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Input from Excel Import Node (with readAsString=True assumed)\r\nraw_excel_data = IN[0]\r\n\r\n# Step 1: Inspect Level 1\r\nif isinstance(raw_excel_data, list):\r\n    OUT = f\"Level 1: {len(raw_excel_data)} elements\"\r\n    OUT = raw_excel_data\r\nelse:\r\n    OUT = \"Unexpected structure at Level 1\"\r\n\r\n# After running this script, please inspect the output and provide some details, such as:\r\n# - The number of elements at Level 1\r\n# - Are they lists or something else?\r\n",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "08e09f5d431c48ccb0ffc4604d9807cf",
      "Inputs": [
        {
          "Id": "0d28a8e28d3f4289b25e7410ed20e4d1",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "d348e8ee811d48139f41865bc76f37b7",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "CoreNodeModels.Watch, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "5619f6911e63465695378a5545162b37",
      "Inputs": [
        {
          "Id": "90de3427e28a4c33bec69cf99035e160",
          "Name": "",
          "Description": "Node to show output from",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "63f3aa981e3940dbbf8081c80120a9a2",
          "Name": "",
          "Description": "Node output",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Visualize the node's output"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Flatten@var[]..[],int",
      "Id": "f1b0c997360a429f9c0f48b05e14bb45",
      "Inputs": [
        {
          "Id": "08935e559dd7436c8cd06226f994b192",
          "Name": "list",
          "Description": "List to flatten.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "e768ec966a3f4bfa9e8de75a870839a3",
          "Name": "amount",
          "Description": "Layers of list nesting to remove (-1 will remove all list nestings)\n\nint\nDefault value : -1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "e23d8f36bb484e0db8c6726f3dc0ca2a",
          "Name": "list",
          "Description": "Flattened list by amount",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Flattens a nested list of lists by a certain amount.\n\nList.Flatten (list: var[]..[], amount: int = -1): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "1;",
      "Id": "da8611b65c15444eb024fd36ecaf2a2f",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "dccfe8d33b8446eab465365801db8e75",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "CoreNodeModels.Watch, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "30d1fa210b754b47909bdb6d84ae1e4f",
      "Inputs": [
        {
          "Id": "8261491bc9ae4a8f8a45e2bae54d6f83",
          "Name": "",
          "Description": "Node to show output from",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "b3a4e2262ce449ed802769cbe6c6291e",
          "Name": "",
          "Description": "Node output",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Visualize the node's output"
    }
  ],
  "Connectors": [
    {
      "Start": "8af77140335f41e18d174df8ac0e5574",
      "End": "16068f94dad24d9b8e86cf66242121ad",
      "Id": "fc489a2981fc4230bdade53457f319c2",
      "IsHidden": "False"
    },
    {
      "Start": "93d9b2a22db147c1a9d88d435429e845",
      "End": "424f7130fcbf41229f582c914f1ccee3",
      "Id": "a908ea275a224882abe67767dbb7f6e8",
      "IsHidden": "False"
    },
    {
      "Start": "93d9b2a22db147c1a9d88d435429e845",
      "End": "1cacd9d1d0104208910c17f91b0b82f8",
      "Id": "cff3486c91354d6ebccc520475142118",
      "IsHidden": "False"
    },
    {
      "Start": "93d9b2a22db147c1a9d88d435429e845",
      "End": "f7040a41c5bd4b1db4c38004260845fb",
      "Id": "58a47f583b5044d09373d780b841dfb3",
      "IsHidden": "False"
    },
    {
      "Start": "93d9b2a22db147c1a9d88d435429e845",
      "End": "6e451e5478a94e90ba3447190e89fe6e",
      "Id": "700e1e1d333940d6a09a0d482d04dd9a",
      "IsHidden": "False"
    },
    {
      "Start": "93d9b2a22db147c1a9d88d435429e845",
      "End": "0df789eb261d4d95a3ed88f4d239f067",
      "Id": "46eb99a52edb465f9aedf27c7129acc8",
      "IsHidden": "False"
    },
    {
      "Start": "93d9b2a22db147c1a9d88d435429e845",
      "End": "3c786a4ba56f4599b774fc5da1ab73a0",
      "Id": "47c71a6899a547c3981b40f2d07744a3",
      "IsHidden": "False"
    },
    {
      "Start": "93d9b2a22db147c1a9d88d435429e845",
      "End": "5fc406585d514424843479d7421c9818",
      "Id": "ce36a8bb1ecc41d8b947b43975118239",
      "IsHidden": "False"
    },
    {
      "Start": "93d9b2a22db147c1a9d88d435429e845",
      "End": "eacdd1fc85ec4a08be03996e297a4aee",
      "Id": "2dcc71fb6b4041e09f8d4069d04de4ca",
      "IsHidden": "False"
    },
    {
      "Start": "93d9b2a22db147c1a9d88d435429e845",
      "End": "662ea279bd074a3ab7253cb22ba150ee",
      "Id": "6b786734f41546fbb6ae0f82d7645f02",
      "IsHidden": "False"
    },
    {
      "Start": "93d9b2a22db147c1a9d88d435429e845",
      "End": "44d89c51e179479c8b3864a58be27178",
      "Id": "846844507ff74f93b5f65923ddff2c31",
      "IsHidden": "False"
    },
    {
      "Start": "93d9b2a22db147c1a9d88d435429e845",
      "End": "a917354c928345388cdfa0144c8773d8",
      "Id": "1b6bd35d555447cfb3bd281b83c06a14",
      "IsHidden": "False"
    },
    {
      "Start": "93d9b2a22db147c1a9d88d435429e845",
      "End": "d9d3529b4f63477ea379d1521974fe34",
      "Id": "786c3512bbca4824afa1e18f7fb77375",
      "IsHidden": "False"
    },
    {
      "Start": "93d9b2a22db147c1a9d88d435429e845",
      "End": "963c99216cc243aaa1394dbf17da848f",
      "Id": "35d4727013a84a2abaa42513978d1944",
      "IsHidden": "False"
    },
    {
      "Start": "93d9b2a22db147c1a9d88d435429e845",
      "End": "0a14875a1f714971ba13ba25945dc1b1",
      "Id": "92b6245f774349b291cd40efaa117545",
      "IsHidden": "False"
    },
    {
      "Start": "93d9b2a22db147c1a9d88d435429e845",
      "End": "59cf80af784f4902a8387344c7c7108c",
      "Id": "8108c300ac4a4983834cec0fddb37952",
      "IsHidden": "False"
    },
    {
      "Start": "93d9b2a22db147c1a9d88d435429e845",
      "End": "396e373a689e48fbb711329ac8ba4e1a",
      "Id": "a575f49dedf647d39299b45267c7a295",
      "IsHidden": "False"
    },
    {
      "Start": "ad7a4d5ea57748d0856e6fa3ffa6acc0",
      "End": "a7cbb22f15a94b8a8f5c36351af776d8",
      "Id": "db631e2f4d814f178d21428ebbd8cd12",
      "IsHidden": "False"
    },
    {
      "Start": "2fe93ddf962443598310de08bb3f6d11",
      "End": "7ab0e259cfed4bd1b4e2a8b25d3bcc88",
      "Id": "86c83f210be944d08125da204e4f2a55",
      "IsHidden": "False"
    },
    {
      "Start": "ea2cd0d3a07944dd9ed531bf6b969614",
      "End": "8ac3815b8bf24755b57aede1b38300fd",
      "Id": "a27a4d3f8ff64b4181b4342ae8a8dc93",
      "IsHidden": "False"
    },
    {
      "Start": "ea2cd0d3a07944dd9ed531bf6b969614",
      "End": "0d28a8e28d3f4289b25e7410ed20e4d1",
      "Id": "ccb4f46b9d624ca59314affb5c495fd7",
      "IsHidden": "False"
    },
    {
      "Start": "ea2cd0d3a07944dd9ed531bf6b969614",
      "End": "08935e559dd7436c8cd06226f994b192",
      "Id": "89feb33480684af9abcc0bc83832fbd8",
      "IsHidden": "False"
    },
    {
      "Start": "b74893368a73420b815b4d66aaef4e62",
      "End": "9841d70967194d6ea7cf5d78d326366a",
      "Id": "785a6389439b41f5b7d186f642d5bf25",
      "IsHidden": "False"
    },
    {
      "Start": "aac56490dcfc43ae9c0bb1682608c211",
      "End": "1fd90d011ac04d8a86aad1ff79d5ebbd",
      "Id": "d09d7d0976a14834ac48e660efd505a6",
      "IsHidden": "False"
    },
    {
      "Start": "1778607a2a5243759031935e9ba9a93b",
      "End": "0b739b4257104e7b8b9d3ca352e7293e",
      "Id": "8923c5f483d64e3db56d6e0195cb3866",
      "IsHidden": "False"
    },
    {
      "Start": "7d23fa33421743b39ddfeafa1108d46f",
      "End": "fc64212e72d14417bab4e6dc6cf99a18",
      "Id": "97f3c52fabcc4db0aaaa324d5d5bbd62",
      "IsHidden": "False"
    },
    {
      "Start": "a1428efa0b1c420eb4491c7dabdb530d",
      "End": "fb1686ca102a44d48a0b31ec09d429da",
      "Id": "250851b8abec42898a9fe906db1e4224",
      "IsHidden": "False"
    },
    {
      "Start": "c02ae76413dd4615a2b53c9a8bb600da",
      "End": "71e7b9fee17945e69121a7fa4d797a81",
      "Id": "776c49f6c4a444628e06340b1fdc7c30",
      "IsHidden": "False"
    },
    {
      "Start": "28a2c83a9f844dbaadf15f28948cca19",
      "End": "9d6cce56c5584ec08cfec4609c95b79d",
      "Id": "c9e47277cab3436e99cd0b3fb2c5fee8",
      "IsHidden": "False"
    },
    {
      "Start": "0fe7798f395747bcab3a7c06332ce12c",
      "End": "a2c4acd75ba743b2bf013512a200c378",
      "Id": "3e4b6b0c69b14926ba8504844822272c",
      "IsHidden": "False"
    },
    {
      "Start": "a2c1b5a23508469693cd2ecb50e164c1",
      "End": "4feff7ccfd384b97ae922279f0c684dc",
      "Id": "314bbed4666f405e8570877a140e82c9",
      "IsHidden": "False"
    },
    {
      "Start": "52450eb6183d438587066cdde5fe45bc",
      "End": "5e74f31659d14bb8bf4ad0e3a051f615",
      "Id": "239425f6803443bdac2f990c14631982",
      "IsHidden": "False"
    },
    {
      "Start": "f3bf1e127dc84392baac661761473675",
      "End": "827f32ac437f433f8e203b322c76a06b",
      "Id": "3d579dfd55a6473a8cea6a2ad1a32707",
      "IsHidden": "False"
    },
    {
      "Start": "4748ffee74eb4724a5379f0a1ad4ada3",
      "End": "035572c80e574e749c050f36688ef02e",
      "Id": "66084403d2464303bddb62f1a266545a",
      "IsHidden": "False"
    },
    {
      "Start": "cf4818fcf1ce42a9bafa63de1f18f4dc",
      "End": "f5fcc6727f944c76bf17e26f900829ff",
      "Id": "e5c556b42a204439aee1ff5c900624ec",
      "IsHidden": "False"
    },
    {
      "Start": "accd2a24d3124481bcc2e3d8a9cc4d85",
      "End": "0100a0a5ad754ece939ab5243e16584c",
      "Id": "a0f2e234ea1041bf849cd302e5b802e4",
      "IsHidden": "False"
    },
    {
      "Start": "ae9881598b6948dea84c86b6f57dd586",
      "End": "f1bb329babe14c75ac36e4bcbb84267c",
      "Id": "03904dfffe524dab87571c967b1e9001",
      "IsHidden": "False"
    },
    {
      "Start": "249029be1c524fa1b7b7b28498bd195e",
      "End": "918fdbd7dfa2474ab0d4a4e6cd712eff",
      "Id": "57bae458fcb24eb183ce6c960b2a37d8",
      "IsHidden": "False"
    },
    {
      "Start": "b00aecc67a7f4f0288299bbab8ac278b",
      "End": "09571e0f7cf745ad87f2e1cabc3c780a",
      "Id": "29b44d6462194370a28b5139376b8e0d",
      "IsHidden": "False"
    },
    {
      "Start": "87602e2a5da5475f9512a05b6dbaf62c",
      "End": "5cfa8fae9d524e6dbd372a756a8b92bd",
      "Id": "03eb126d73a646e0b3c6784f28db5081",
      "IsHidden": "False"
    },
    {
      "Start": "19112b14ead441dca7ac21adcc4a4d7f",
      "End": "616c2a89234a45cf8ad8c8465235ba68",
      "Id": "2ea2d1839c2d4a2d81ed46e3ec24cba1",
      "IsHidden": "False"
    },
    {
      "Start": "caff3030cd304f7da798d75b9b7a7434",
      "End": "71d3705deb2b48df81735c7e8ba6d4f5",
      "Id": "c9dc780fc68849c990ca8f91b605c6d9",
      "IsHidden": "False"
    },
    {
      "Start": "8fd3002c053f47079f0de7f84cc4bd6f",
      "End": "5b82fb41a164447b8b88ed74c8c42619",
      "Id": "18dfb1c6bf9049af87aba4af3848d1e7",
      "IsHidden": "False"
    },
    {
      "Start": "376e5c20c2a64f42bb6706be57ffd549",
      "End": "67909dc92e3d4d328c360d8c0ff467ee",
      "Id": "3f60e0c8155548b88db42b6ed3613d09",
      "IsHidden": "False"
    },
    {
      "Start": "376e5c20c2a64f42bb6706be57ffd549",
      "End": "6ac2457ba1c241eebdb828ead64db507",
      "Id": "24b288ceb6dd4391aec87eccb6e1e597",
      "IsHidden": "False"
    },
    {
      "Start": "d05c05d837cf465691c46a7e480339a2",
      "End": "859ac191ef44439aaccbde733c1053d7",
      "Id": "c3b33721a5df4e4b94f4b1f6cc41ed89",
      "IsHidden": "False"
    },
    {
      "Start": "8cfc272f21d54a82bc6babc9dc056776",
      "End": "7f5acc31bfb14b07abe635bd030e14f8",
      "Id": "c7dd4b69712e43a38772087d18392853",
      "IsHidden": "False"
    },
    {
      "Start": "ba03bd4bb32945efbda2f116c0c979b3",
      "End": "a6c44b7733c74b74a427dee3c5d6f799",
      "Id": "1cf5b1f8a7dc4d538c3724e2e1fe535b",
      "IsHidden": "False"
    },
    {
      "Start": "7d1b32703f0b4e7a87f156540f2b757f",
      "End": "4f2a5d9ec9c546ebadac6e18bd6c7d9b",
      "Id": "06ed50ad4bf9416c853dd9cb5ecdc420",
      "IsHidden": "False"
    },
    {
      "Start": "1db683f1d4f54bd3a58bd766a1b4fc0b",
      "End": "d83af7dfcdbc4dff93f092742ea5c8a9",
      "Id": "bd82bdedace64a229403ba1d44dfe33c",
      "IsHidden": "False"
    },
    {
      "Start": "8e3a139bc56a424791c0398c36924ebb",
      "End": "befb23bc42b342218bfaba9841edea9e",
      "Id": "cc07835b592b4d71a9190d6429dca4dc",
      "IsHidden": "False"
    },
    {
      "Start": "47d56151416c424fb332d4ffb3d19fcb",
      "End": "1ee1b63d7ef84abbb4dd160205f77c87",
      "Id": "4534fa2b06bd494188072c32a3217470",
      "IsHidden": "False"
    },
    {
      "Start": "50a575ef92884c5d9ebdcdfa0fa58ec6",
      "End": "7349413cc9fd4ee2b2db407a2a1e7881",
      "Id": "19edb20f88bb4e94bfc3ad87abfc8887",
      "IsHidden": "False"
    },
    {
      "Start": "93a2fbcad8424170a84b8862589fb677",
      "End": "09a8b641b49146f698a8b167d4b72cf7",
      "Id": "1e9d15df768c4420923c40d9a5b8c2af",
      "IsHidden": "False"
    },
    {
      "Start": "71156d903df34375bcfcc8caf5ab824d",
      "End": "e65cfefae1aa4dbaaf0c3ad21c31f696",
      "Id": "e5195c85cd5a49cc801fbe8e737d9305",
      "IsHidden": "False"
    },
    {
      "Start": "33211f5def1840e490839fd1bca78761",
      "End": "1e301d1b9acd476fbbe686961023aef6",
      "Id": "37891901315049108164eb06c3a35cf7",
      "IsHidden": "False"
    },
    {
      "Start": "4bdef30e9fe842528da7c00c12d38bae",
      "End": "131207cb64e14b34917ba2898077befd",
      "Id": "45189754c2fa406794e2bddd14b15d26",
      "IsHidden": "False"
    },
    {
      "Start": "125bb003c421474eab9a5c6fd155df72",
      "End": "d753b1112a11414792749c9f9f25973f",
      "Id": "ce846e0980fc449ba99bb00f713e747c",
      "IsHidden": "False"
    },
    {
      "Start": "3485a47a6c32419397a119c4166ef680",
      "End": "aea25ae4bd5a4142a484b67101cbf4d0",
      "Id": "2e75e981a9ae45c6b021d322fe5da8f8",
      "IsHidden": "False"
    },
    {
      "Start": "027c3189f57b4188a3e95c3b8d1d1487",
      "End": "62568bdb00b94c0fb7202781e3d5316a",
      "Id": "5750aeb3a2f04133a57b54a146745cc3",
      "IsHidden": "False"
    },
    {
      "Start": "cd41aeaa8f7c47a1ba232dc9587d3926",
      "End": "ad9713e294ef4eb0a1df5a084082b2f7",
      "Id": "4a01ef9f05074fefb075d8d965f6dede",
      "IsHidden": "False"
    },
    {
      "Start": "6284ff89bb1a4990a73efae1caaba60b",
      "End": "5d870af658fe41e2a5aee19a3cfa06d7",
      "Id": "7c34c775b1e1447dad86939317374bba",
      "IsHidden": "False"
    },
    {
      "Start": "db269162b1504f498bfb827829338793",
      "End": "8543805b15dc46c6808b1e93196a2e3f",
      "Id": "305a25ba42c44381b01735c6416412a2",
      "IsHidden": "False"
    },
    {
      "Start": "dd156cd526d24171ac4771b7f8cbae52",
      "End": "4338b34ac47b42e09a03bc436a211e0d",
      "Id": "cbbe79787b474d4088f680b85372e987",
      "IsHidden": "False"
    },
    {
      "Start": "35abbe63f2e645b2a01454fe79512e42",
      "End": "d0763419b62849e1be01fc770e4fd191",
      "Id": "9aa4111d0457498bb1512ebc5d0d5edc",
      "IsHidden": "False"
    },
    {
      "Start": "6ebaac9622054c8f86738a7c80418091",
      "End": "1bff890179274f178bd12b64c7434192",
      "Id": "58f811c98fea43c6946e06a08e4fafeb",
      "IsHidden": "False"
    },
    {
      "Start": "db2df4cecb3749418cfee6413da03b27",
      "End": "3f6e02ed2d7e4baba77ba1d1519697aa",
      "Id": "bdc64b6332de483691b236946db5fbc8",
      "IsHidden": "False"
    },
    {
      "Start": "d348e8ee811d48139f41865bc76f37b7",
      "End": "90de3427e28a4c33bec69cf99035e160",
      "Id": "5a61852368c8461d9c26faef2dde41b9",
      "IsHidden": "False"
    },
    {
      "Start": "e23d8f36bb484e0db8c6726f3dc0ca2a",
      "End": "8261491bc9ae4a8f8a45e2bae54d6f83",
      "Id": "bb56dc69255a42d7ae2a862634bebd34",
      "IsHidden": "False"
    },
    {
      "Start": "e23d8f36bb484e0db8c6726f3dc0ca2a",
      "End": "714d4356e8274c5cb0c272dd6ec963ac",
      "Id": "a0fc8dfe550f419fad6fb38b976ffb84",
      "IsHidden": "False"
    },
    {
      "Start": "dccfe8d33b8446eab465365801db8e75",
      "End": "e768ec966a3f4bfa9e8de75a870839a3",
      "Id": "2d981b7b57fc4280bbbae7461ac3902d",
      "IsHidden": "False"
    }
  ],
  "Dependencies": [],
  "NodeLibraryDependencies": [],
  "Thumbnail": "",
  "GraphDocumentationURL": null,
  "ExtensionWorkspaceData": [
    {
      "ExtensionGuid": "28992e1d-abb9-417f-8b1b-05e053bee670",
      "Name": "Properties",
      "Version": "2.16",
      "Data": {}
    },
    {
      "ExtensionGuid": "DFBD9CC0-DB40-457A-939E-8C8555555A9D",
      "Name": "Generative Design",
      "Version": "3.0",
      "Data": {}
    }
  ],
  "Author": "",
  "Linting": {
    "activeLinter": "None",
    "activeLinterId": "7b75fb44-43fd-4631-a878-29f4d5d8399a",
    "warningCount": 0,
    "errorCount": 0
  },
  "Bindings": [],
  "View": {
    "Dynamo": {
      "ScaleFactor": 1.0,
      "HasRunWithoutCrash": true,
      "IsVisibleInDynamoLibrary": true,
      "Version": "2.16.2.5624",
      "RunType": "Automatic",
      "RunPeriod": "1000"
    },
    "Camera": {
      "Name": "Background Preview",
      "EyeX": -17.0,
      "EyeY": 24.0,
      "EyeZ": 50.0,
      "LookX": 12.0,
      "LookY": -13.0,
      "LookZ": -58.0,
      "UpX": 0.0,
      "UpY": 1.0,
      "UpZ": 0.0
    },
    "ConnectorPins": [],
    "NodeViews": [
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "3a938488321347ab831291ade1c35e17",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 318.13016482311582,
        "Y": 5424.2778770470459
      },
      {
        "Name": "Python Script",
        "ShowGeometry": true,
        "Id": "9ad778fd162047ed81d4b937a126e37c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 589.0328915181401,
        "Y": 5424.109122250883
      },
      {
        "Name": "Boolean",
        "ShowGeometry": true,
        "Id": "501b048d7d0d418093f6588230ae56b1",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 510.08392581833846,
        "Y": 695.917151282577
      },
      {
        "Name": "String.Join",
        "ShowGeometry": true,
        "Id": "27d6a102833e4387957fb35a6cacf317",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 116.93624601297961,
        "Y": 253.33370837457824
      },
      {
        "Name": "Data.ImportExcel",
        "ShowGeometry": true,
        "Id": "19e77731cca74c5e95d753a61069d435",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 804.08392581833846,
        "Y": 423.91715128257704
      },
      {
        "Name": "String",
        "ShowGeometry": true,
        "Id": "63394fe975de4bd190db141f8a040e51",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 510.08392581833846,
        "Y": 401.91715128257704
      },
      {
        "Name": "File From Path",
        "ShowGeometry": true,
        "Id": "47ecfcee36264a11a3fdb28b4233eb9b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 510.08392581833846,
        "Y": 252.91715128257704
      },
      {
        "Name": "FileSystem.CombinePath",
        "ShowGeometry": true,
        "Id": "70b12d9fb1834b9a89e5ed18da39e796",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -240.06375398702039,
        "Y": 344.33370837457824
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "aeb5f99f742d430394e4b475037bd9b2",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -240.06375398702039,
        "Y": 196.16120837457856
      },
      {
        "Name": "String.Join",
        "ShowGeometry": true,
        "Id": "2780564aeb9042b09cdece32b67d4aa1",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -792.05373722645209,
        "Y": 610.80181411059857
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "ed6e5ffec7b14ea882d70db0a0accc3d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1068.0537372264521,
        "Y": 553.6293141105989
      },
      {
        "Name": "List.LastItem",
        "ShowGeometry": true,
        "Id": "f299887cf765427ba274a6960e077353",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1068.0537372264521,
        "Y": 701.80181411059857
      },
      {
        "Name": "String.Split",
        "ShowGeometry": true,
        "Id": "7f629a6390f74c5285a9c992ec3b6c75",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1449.0537372264521,
        "Y": 701.80181411059857
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "50840014c7a24cc8905bbb65bfccfa35",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1703.0537372264521,
        "Y": 735.6293141105989
      },
      {
        "Name": "String from Object",
        "ShowGeometry": true,
        "Id": "100500e5e8ca4c4f8074d092046414ff",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2008.8473751215438,
        "Y": 708.16557948900845
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "732105eb9883459391d8ca2874a4a82f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1467.9356605016774,
        "Y": 315.33964363613904
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "b0310d183dcb4618864cee7982fc7783",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1721.9356605016774,
        "Y": 171.33964363613904
      },
      {
        "Name": "List.DropItems",
        "ShowGeometry": true,
        "Id": "3495deabb3564e158d4e4df9aad94c10",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1086.9356605016774,
        "Y": 209.51214363613963
      },
      {
        "Name": "String.Split",
        "ShowGeometry": true,
        "Id": "c21f21ce35564f9c8d9e7940504655c6",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1467.9356605016774,
        "Y": 137.51214363613963
      },
      {
        "Name": "String.Join",
        "ShowGeometry": true,
        "Id": "680cca8619d44faeaee0da439d6b7eac",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -791.93566050167738,
        "Y": 118.51214363613963
      },
      {
        "Name": "Document.FilePath",
        "ShowGeometry": true,
        "Id": "b03b5de533ad46d1946cfb01737f875c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2041.6714286210276,
        "Y": 138.42727235441907
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "2f837339110c4581999d12f7398f367f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1086.9356605016774,
        "Y": 61.339643636139044
      },
      {
        "Name": "File From Path",
        "ShowGeometry": true,
        "Id": "e2490c25dbe547c5a580ce6d2157e0bc",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2288.8473751215438,
        "Y": 708.16557948900845
      },
      {
        "Name": "File Path",
        "ShowGeometry": true,
        "Id": "636651ca158d43f7a5f22b1311c67c41",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2683.8473751215438,
        "Y": 708.16557948900845
      },
      {
        "Name": "Document.Current",
        "ShowGeometry": true,
        "Id": "047a847b2d9445a08d05744b2e545025",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2350.6714286210276,
        "Y": 138.42727235441907
      },
      {
        "Name": "Watch",
        "ShowGeometry": true,
        "Id": "1ab8c488dc8d449a867be35376a6604e",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1972.9978440080749,
        "Y": -538.90866172677943
      },
      {
        "Name": "Python Script",
        "ShowGeometry": true,
        "Id": "73c9b09e50bb4f1a860c600349c41e13",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3953.6685853866593,
        "Y": 837.38638274246784
      },
      {
        "Name": "Watch",
        "ShowGeometry": true,
        "Id": "285b5387a3ff43529037ef0f868bb348",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4707.2755336893915,
        "Y": 3201.8841503008293
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "895a19fa868b492ebfc5ec6ac6ebfd70",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3511.5256027810492,
        "Y": 1033.0966901001775
      },
      {
        "Name": "Python Script",
        "ShowGeometry": true,
        "Id": "158fe3300c874088b64cf09150e0618f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4374.307729467203,
        "Y": 2251.76182347333
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "b241039a8e81427eb505a24044e6ca15",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3994.307729467203,
        "Y": 2285.5893234733294
      },
      {
        "Name": "Python Script",
        "ShowGeometry": true,
        "Id": "219dac865c4e4ac49bf83e60b654abdb",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4353.0893004926475,
        "Y": 5484.0069332603716
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "34a3988ce124471f951c49e595d7bc53",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3973.089300492647,
        "Y": 5517.834433260372
      },
      {
        "Name": "Python Script",
        "ShowGeometry": true,
        "Id": "2c180ec36e0245b7808a39b371ee0957",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4360.4810871511918,
        "Y": 7203.7559343143248
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "cc1ff340404c4c0da8366fd1cbc0d741",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3980.4810871511918,
        "Y": 7237.5834343143242
      },
      {
        "Name": "Python Script",
        "ShowGeometry": true,
        "Id": "faf87c64ac90437f86a6d3adcbfe672b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4373.1312526003057,
        "Y": 8208.85212505699
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "b3a40c8b8b95415aa97e7c0e38806cc2",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3993.1312526003057,
        "Y": 8242.67962505699
      },
      {
        "Name": "Python Script",
        "ShowGeometry": true,
        "Id": "70c746f883d345e099b213073de25bf3",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4364.5980436781892,
        "Y": 7895.0196635880175
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "3439b7cae04146519c968d2a03532a01",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3984.5980436781892,
        "Y": 7928.8471635880169
      },
      {
        "Name": "Python Script",
        "ShowGeometry": true,
        "Id": "83b8b14724844cf19fdfdf116d59ab16",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4373.1312526003057,
        "Y": 8531.0502778689479
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "8783637cb75b4225804feecbec433590",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3993.1312526003057,
        "Y": 8564.8777778689473
      },
      {
        "Name": "Python Script",
        "ShowGeometry": true,
        "Id": "208b54a4a92e47c4b037eece2d74ced4",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4361.6831932357118,
        "Y": 6879.5399254054628
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "e8a5bcfd88254296abda623fa10b7087",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3981.6831932357118,
        "Y": 6913.3674254054631
      },
      {
        "Name": "Python Script",
        "ShowGeometry": true,
        "Id": "d6182a2d8bcc4627937619d968935160",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4364.3245488266311,
        "Y": 6559.93589890417
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "3f0262d8bdb14c2c8cfe40a685b20d4a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3984.3245488266311,
        "Y": 6593.76339890417
      },
      {
        "Name": "Python Script",
        "ShowGeometry": true,
        "Id": "57c53797855c4931996cee0badb4c193",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4368.1693387064242,
        "Y": 6240.818338881314
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "0b90f619fc0f4292b3205be94b6c7a71",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3988.1693387064247,
        "Y": 6274.6458388813135
      },
      {
        "Name": "Python Script",
        "ShowGeometry": true,
        "Id": "fcdb6fdcacce4f849b104b238d2f9079",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4356.9675701830038,
        "Y": 5167.9279534963189
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "9f8a12cfa0114077b58d919ddee0c3ce",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3976.9675701830033,
        "Y": 5201.75545349632
      },
      {
        "Name": "Python Script",
        "ShowGeometry": true,
        "Id": "fc1aca49769d4debb80087cae2b454f4",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4360.84583987336,
        "Y": 4838.275029816019
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "c66f92da073741d985d9adc48625e8d6",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3980.84583987336,
        "Y": 4872.1025298160293
      },
      {
        "Name": "Python Script",
        "ShowGeometry": true,
        "Id": "311ec44902cd41258169dfd7ba5dceb3",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4383.0173732523226,
        "Y": 2892.4193195434118
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "d461cb57a48c4fb2aa2830708fa87b7f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4050.0173732523226,
        "Y": 2926.2468195434117
      },
      {
        "Name": "Python Script",
        "ShowGeometry": true,
        "Id": "8f27b398eea74dca853a9cc87bdb9816",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4394.9404902863489,
        "Y": 3223.6964024092595
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "f9b7a517877f40c39a94e6897ef1b640",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4014.9404902863489,
        "Y": 3257.52390240926
      },
      {
        "Name": "Watch",
        "ShowGeometry": true,
        "Id": "228d0d19a1374cc5b8f862884ea938fe",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4698.1667025881907,
        "Y": 4182.601632196468
      },
      {
        "Name": "Python Script",
        "ShowGeometry": true,
        "Id": "7780b1378bbb4dcfbd34b5a81abf7a88",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4385.8316591851508,
        "Y": 4204.4138843048986
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "d619319848c64235a3f11c9bbb3d0865",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4005.8316591851508,
        "Y": 4238.241384304898
      },
      {
        "Name": "Python Script",
        "ShowGeometry": true,
        "Id": "a08244fc71484def9724cd7ee39a6b3a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4373.9085421511209,
        "Y": 3873.1368014390482
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "902790c34aa24395a0bc7a3f243e6e87",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4040.9085421511209,
        "Y": 3906.9643014390481
      },
      {
        "Name": "Watch",
        "ShowGeometry": true,
        "Id": "c4b45831aafd469d82914a31b3203d01",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4699.5341779668788,
        "Y": 3751.8468879098491
      },
      {
        "Name": "Watch",
        "ShowGeometry": true,
        "Id": "e49a7b1567b3401984f7573a8509bcb8",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4239.4127655870006,
        "Y": 840.17955059085318
      },
      {
        "Name": "Python Script",
        "ShowGeometry": true,
        "Id": "8026e15f504041d6bdead0d32f5b556f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3954.5198793922527,
        "Y": 1193.7954199394976
      },
      {
        "Name": "Watch",
        "ShowGeometry": true,
        "Id": "b6d350babd7c4f11a2a0b3b9e7d6c20c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4246.36719068164,
        "Y": 1192.3958878387816
      },
      {
        "Name": "Python Script",
        "ShowGeometry": true,
        "Id": "e5f5d610811f4f8daf532fe9f38b697c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2404.8282695165981,
        "Y": 645.22147898998594
      },
      {
        "Name": "Watch",
        "ShowGeometry": true,
        "Id": "8d8005d6fd9a434a837aeabb22cfa0d4",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2701.264579242742,
        "Y": 857.3392881884057
      },
      {
        "Name": "Boolean",
        "ShowGeometry": true,
        "Id": "f52a7c506bf94bb0b3198b293812443d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 510.08392581833846,
        "Y": 548.917151282577
      },
      {
        "Name": "Python Script",
        "ShowGeometry": true,
        "Id": "08e09f5d431c48ccb0ffc4604d9807cf",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1984.109332715168,
        "Y": -722.86691976634438
      },
      {
        "Name": "Watch",
        "ShowGeometry": true,
        "Id": "5619f6911e63465695378a5545162b37",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2293.927939824051,
        "Y": -721.74292832102469
      },
      {
        "Name": "List.Flatten",
        "ShowGeometry": true,
        "Id": "f1b0c997360a429f9c0f48b05e14bb45",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2060.7960711238366,
        "Y": 640.19747777782823
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "da8611b65c15444eb024fd36ecaf2a2f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1801.6530907481558,
        "Y": 783.21211934378084
      },
      {
        "Name": "Watch",
        "ShowGeometry": true,
        "Id": "30d1fa210b754b47909bdb6d84ae1e4f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2350.4219834375549,
        "Y": 881.92015457936679
      }
    ],
    "Annotations": [
      {
        "Id": "7230ae94d16d43d6b8a52d6f709bc9e8",
        "Title": "Read from Takeoff Excel",
        "DescriptionText": "<Double click here to edit group description>",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "19e77731cca74c5e95d753a61069d435",
          "63394fe975de4bd190db141f8a040e51",
          "47ecfcee36264a11a3fdb28b4233eb9b",
          "501b048d7d0d418093f6588230ae56b1",
          "f52a7c506bf94bb0b3198b293812443d"
        ],
        "HasNestedGroups": false,
        "Left": 500.08392581833846,
        "Top": 179.91715128257704,
        "Width": 552.0,
        "Height": 648.0,
        "FontSize": 36.0,
        "InitialTop": 252.91715128257704,
        "InitialHeight": 457.0,
        "TextblockHeight": 63.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "28dbc2222ea04121b1d7386a4eb52288",
        "Title": "Combine Into the Current Project Path and Template Name for Master Check",
        "DescriptionText": "<Double click here to edit group description>",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "70b12d9fb1834b9a89e5ed18da39e796",
          "27d6a102833e4387957fb35a6cacf317",
          "aeb5f99f742d430394e4b475037bd9b2"
        ],
        "HasNestedGroups": false,
        "Left": -250.06375398702039,
        "Top": 80.161208374578564,
        "Width": 644.0,
        "Height": 426.17249999999967,
        "FontSize": 36.0,
        "InitialTop": 196.16120837457856,
        "InitialHeight": 340.17249999999967,
        "TextblockHeight": 106.0,
        "Background": "#FFB9F9E1"
      },
      {
        "Id": "7d4725821b59437c93252ffd8cecfa22",
        "Title": "Return the File Name of the Master Check Template",
        "DescriptionText": "<Double click here to edit group description>",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "2780564aeb9042b09cdece32b67d4aa1",
          "ed6e5ffec7b14ea882d70db0a0accc3d",
          "f299887cf765427ba274a6960e077353",
          "7f629a6390f74c5285a9c992ec3b6c75",
          "50840014c7a24cc8905bbb65bfccfa35"
        ],
        "HasNestedGroups": false,
        "Left": -1713.0537372264521,
        "Top": 480.6293141105989,
        "Width": 1198.0,
        "Height": 387.0,
        "FontSize": 36.0,
        "InitialTop": 553.6293141105989,
        "InitialHeight": 344.0,
        "TextblockHeight": 63.0,
        "Background": "#FFB9F9E1"
      },
      {
        "Id": "58b327b5c53b4df8ad2b9bc6a442747d",
        "Title": "Master Check Template Location",
        "DescriptionText": "<Double click here to edit group description>",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "100500e5e8ca4c4f8074d092046414ff",
          "e2490c25dbe547c5a580ce6d2157e0bc",
          "636651ca158d43f7a5f22b1311c67c41"
        ],
        "HasNestedGroups": false,
        "Left": -2693.8473751215438,
        "Top": 635.16557948900845,
        "Width": 906.0,
        "Height": 214.0,
        "FontSize": 36.0,
        "InitialTop": 708.16557948900845,
        "InitialHeight": 171.0,
        "TextblockHeight": 63.0,
        "Background": "#FFBB87C6"
      },
      {
        "Id": "7b46ceafd23c4267ac2af8735557a9be",
        "Title": "Return the Folder of the Current Project",
        "DescriptionText": "<Double click here to edit group description>",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "732105eb9883459391d8ca2874a4a82f",
          "b0310d183dcb4618864cee7982fc7783",
          "3495deabb3564e158d4e4df9aad94c10",
          "c21f21ce35564f9c8d9e7940504655c6",
          "680cca8619d44faeaee0da439d6b7eac",
          "2f837339110c4581999d12f7398f367f"
        ],
        "HasNestedGroups": false,
        "Left": -1731.9356605016774,
        "Top": -11.660356363860956,
        "Width": 1217.0,
        "Height": 459.0,
        "FontSize": 36.0,
        "InitialTop": 61.339643636139044,
        "InitialHeight": 416.0,
        "TextblockHeight": 63.0,
        "Background": "#FFB9F9E1"
      },
      {
        "Id": "5840d1783f294c0d8490694264a35fe1",
        "Title": "Current Project",
        "DescriptionText": "<Double click here to edit group description>",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "b03b5de533ad46d1946cfb01737f875c",
          "047a847b2d9445a08d05744b2e545025"
        ],
        "HasNestedGroups": false,
        "Left": -2360.6714286210276,
        "Top": 65.427272354419074,
        "Width": 553.0,
        "Height": 205.0,
        "FontSize": 36.0,
        "InitialTop": 138.42727235441907,
        "InitialHeight": 162.0,
        "TextblockHeight": 63.0,
        "Background": "#FFD4B6DB"
      },
      {
        "Id": "e106528229b24a3eab7ba452717194b0",
        "Title": "Sub-Header in Legend",
        "DescriptionText": "<Double click here to edit group description>",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "73c9b09e50bb4f1a860c600349c41e13"
        ],
        "HasNestedGroups": false,
        "Left": 3943.6685853866593,
        "Top": 668.38638274246784,
        "Width": 210.30666666666667,
        "Height": 331.0,
        "FontSize": 36.0,
        "InitialTop": 837.38638274246784,
        "InitialHeight": 310.0,
        "TextblockHeight": 159.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "432db4a6d9e7444cb8d635a018681701",
        "Title": "Process Legend Sub-Header on Sheet",
        "DescriptionText": "<Double click here to edit group description>",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "158fe3300c874088b64cf09150e0618f",
          "b241039a8e81427eb505a24044e6ca15"
        ],
        "HasNestedGroups": false,
        "Left": 3984.307729467203,
        "Top": 2135.36182347333,
        "Width": 574.0,
        "Height": 282.22749999999951,
        "FontSize": 36.0,
        "InitialTop": 2251.76182347333,
        "InitialHeight": 195.82749999999965,
        "TextblockHeight": 106.4,
        "Background": "#FFC1D676"
      },
      {
        "Id": "8ccd3a43284746d4a6304808fab7b108",
        "Title": "Process Legend Sub-Header on Sheet",
        "DescriptionText": "<Double click here to edit group description>",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "219dac865c4e4ac49bf83e60b654abdb",
          "34a3988ce124471f951c49e595d7bc53"
        ],
        "HasNestedGroups": false,
        "Left": 3963.089300492647,
        "Top": 5367.606933260372,
        "Width": 574.00000000000045,
        "Height": 282.22749999999996,
        "FontSize": 36.0,
        "InitialTop": 5484.0069332603716,
        "InitialHeight": 195.82750000000033,
        "TextblockHeight": 106.4,
        "Background": "#FFC1D676"
      },
      {
        "Id": "b6eb1ac2f60f47f7870bfdd44c97ab37",
        "Title": "Process Legend Sub-Header on Sheet",
        "DescriptionText": "<Double click here to edit group description>",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "2c180ec36e0245b7808a39b371ee0957",
          "cc1ff340404c4c0da8366fd1cbc0d741"
        ],
        "HasNestedGroups": false,
        "Left": 3970.4810871511918,
        "Top": 7087.3559343143252,
        "Width": 574.0,
        "Height": 292.22749999999905,
        "FontSize": 36.0,
        "InitialTop": 7203.7559343143248,
        "InitialHeight": 195.82749999999987,
        "TextblockHeight": 106.4,
        "Background": "#FFC1D676"
      },
      {
        "Id": "beae7c89591d400cb2d2ac76d8acbbea",
        "Title": "Process Legend Sub-Header on Sheet",
        "DescriptionText": "<Double click here to edit group description>",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "faf87c64ac90437f86a6d3adcbfe672b",
          "b3a40c8b8b95415aa97e7c0e38806cc2"
        ],
        "HasNestedGroups": false,
        "Left": 3983.1312526003057,
        "Top": 8092.4521250569906,
        "Width": 574.0,
        "Height": 282.22749999999905,
        "FontSize": 36.0,
        "InitialTop": 8208.85212505699,
        "InitialHeight": 205.82749999999987,
        "TextblockHeight": 106.4,
        "Background": "#FFC1D676"
      },
      {
        "Id": "a87db7ef27b149948f1faa6d9c227175",
        "Title": "Process Legend Sub-Header on Sheet",
        "DescriptionText": "<Double click here to edit group description>",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "70c746f883d345e099b213073de25bf3",
          "3439b7cae04146519c968d2a03532a01"
        ],
        "HasNestedGroups": false,
        "Left": 3974.5980436781892,
        "Top": 7779.0196635880175,
        "Width": 574.0,
        "Height": 281.82749999999942,
        "FontSize": 36.0,
        "InitialTop": 7895.0196635880175,
        "InitialHeight": 195.82749999999987,
        "TextblockHeight": 106.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "ee1cd89ee0a84dd3bbc41be70968af2c",
        "Title": "Process Legend Sub-Header on Sheet",
        "DescriptionText": "<Double click here to edit group description>",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "83b8b14724844cf19fdfdf116d59ab16",
          "8783637cb75b4225804feecbec433590"
        ],
        "HasNestedGroups": false,
        "Left": 3983.1312526003057,
        "Top": 8415.0502778689479,
        "Width": 574.0,
        "Height": 281.82749999999942,
        "FontSize": 36.0,
        "InitialTop": 8531.0502778689479,
        "InitialHeight": 195.82749999999987,
        "TextblockHeight": 106.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "f7f99e2a226d4c618e479218e73596d2",
        "Title": "Process Legend Sub-Header on Sheet",
        "DescriptionText": "<Double click here to edit group description>",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "208b54a4a92e47c4b037eece2d74ced4",
          "e8a5bcfd88254296abda623fa10b7087"
        ],
        "HasNestedGroups": false,
        "Left": 3971.6831932357118,
        "Top": 6763.1399254054631,
        "Width": 574.0,
        "Height": 282.22749999999996,
        "FontSize": 36.0,
        "InitialTop": 6879.5399254054628,
        "InitialHeight": 195.82749999999987,
        "TextblockHeight": 106.4,
        "Background": "#FFC1D676"
      },
      {
        "Id": "a17105df9d7942729ef2713645084c7e",
        "Title": "Process Legend Sub-Header on Sheet",
        "DescriptionText": "<Double click here to edit group description>",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "d6182a2d8bcc4627937619d968935160",
          "3f0262d8bdb14c2c8cfe40a685b20d4a"
        ],
        "HasNestedGroups": false,
        "Left": 3974.3245488266311,
        "Top": 6443.5358989041706,
        "Width": 574.0,
        "Height": 282.22749999999905,
        "FontSize": 36.0,
        "InitialTop": 6559.93589890417,
        "InitialHeight": 195.82749999999987,
        "TextblockHeight": 106.4,
        "Background": "#FFC1D676"
      },
      {
        "Id": "d39a8b33170a4942aea3f85e5e23686a",
        "Title": "Process Legend Sub-Header on Sheet",
        "DescriptionText": "<Double click here to edit group description>",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "57c53797855c4931996cee0badb4c193",
          "0b90f619fc0f4292b3205be94b6c7a71"
        ],
        "HasNestedGroups": false,
        "Left": 3978.1693387064247,
        "Top": 6124.818338881314,
        "Width": 573.99999999999955,
        "Height": 281.82749999999942,
        "FontSize": 36.0,
        "InitialTop": 6240.818338881314,
        "InitialHeight": 195.82749999999987,
        "TextblockHeight": 106.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "3c27184a03f24508bcfa44060fd10047",
        "Title": "Process Legend Sub-Header on Sheet",
        "DescriptionText": "<Double click here to edit group description>",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "fcdb6fdcacce4f849b104b238d2f9079",
          "9f8a12cfa0114077b58d919ddee0c3ce"
        ],
        "HasNestedGroups": false,
        "Left": 3966.9675701830033,
        "Top": 5051.5279534963192,
        "Width": 574.00000000000045,
        "Height": 282.22750000000087,
        "FontSize": 36.0,
        "InitialTop": 5167.9279534963189,
        "InitialHeight": 195.82750000000033,
        "TextblockHeight": 106.4,
        "Background": "#FFC1D676"
      },
      {
        "Id": "59689b10f87f4151a26afbbd7a96b41f",
        "Title": "Process Legend Sub-Header on Sheet",
        "DescriptionText": "<Double click here to edit group description>",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "fc1aca49769d4debb80087cae2b454f4",
          "c66f92da073741d985d9adc48625e8d6"
        ],
        "HasNestedGroups": false,
        "Left": 3970.84583987336,
        "Top": 4722.275029816019,
        "Width": 574.0,
        "Height": 281.82750000001033,
        "FontSize": 36.0,
        "InitialTop": 4838.275029816019,
        "InitialHeight": 195.82750000001033,
        "TextblockHeight": 106.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "b285094d64ea4b5ea2de027e4883932e",
        "Title": "Process Legend Sub-Header on Sheet",
        "DescriptionText": "<Double click here to edit group description>",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "311ec44902cd41258169dfd7ba5dceb3",
          "d461cb57a48c4fb2aa2830708fa87b7f"
        ],
        "HasNestedGroups": false,
        "Left": 4040.0173732523226,
        "Top": 2776.0193195434117,
        "Width": 527.0,
        "Height": 292.22749999999996,
        "FontSize": 36.0,
        "InitialTop": 2892.4193195434118,
        "InitialHeight": 195.82750000000033,
        "TextblockHeight": 106.4,
        "Background": "#FFC1D676"
      },
      {
        "Id": "e75ca649ac5147d8984a0ec3a22ae100",
        "Title": "Process Legend Sub-Header on Sheet",
        "DescriptionText": "<Double click here to edit group description>",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "8f27b398eea74dca853a9cc87bdb9816",
          "f9b7a517877f40c39a94e6897ef1b640"
        ],
        "HasNestedGroups": false,
        "Left": 4004.9404902863489,
        "Top": 3107.2964024092594,
        "Width": 574.0,
        "Height": 282.22750000000042,
        "FontSize": 36.0,
        "InitialTop": 3223.6964024092595,
        "InitialHeight": 195.82750000000033,
        "TextblockHeight": 106.4,
        "Background": "#FFC1D676"
      },
      {
        "Id": "03fb69e2007f4992b7c14ed4f58fb315",
        "Title": "Process Legend Sub-Header on Sheet",
        "DescriptionText": "<Double click here to edit group description>",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "7780b1378bbb4dcfbd34b5a81abf7a88",
          "d619319848c64235a3f11c9bbb3d0865"
        ],
        "HasNestedGroups": false,
        "Left": 3995.8316591851508,
        "Top": 4088.4138843048986,
        "Width": 574.0,
        "Height": 281.82749999999942,
        "FontSize": 36.0,
        "InitialTop": 4204.4138843048986,
        "InitialHeight": 195.82749999999942,
        "TextblockHeight": 106.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "95bda9de04234b70a0fd1b33ac886ff2",
        "Title": "Process Legend Sub-Header on Sheet",
        "DescriptionText": "<Double click here to edit group description>",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "a08244fc71484def9724cd7ee39a6b3a",
          "902790c34aa24395a0bc7a3f243e6e87"
        ],
        "HasNestedGroups": false,
        "Left": 4030.9085421511209,
        "Top": 3757.1368014390482,
        "Width": 527.0,
        "Height": 281.82749999999987,
        "FontSize": 36.0,
        "InitialTop": 3873.1368014390482,
        "InitialHeight": 205.82749999999987,
        "TextblockHeight": 106.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "864eb8e0d4db4069bafdb9d9198b7d94",
        "Title": "Sub-Header in Excel",
        "DescriptionText": "<Double click here to edit group description>",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "8026e15f504041d6bdead0d32f5b556f"
        ],
        "HasNestedGroups": false,
        "Left": 3944.5198793922527,
        "Top": 1024.7954199394976,
        "Width": 210.30666666666667,
        "Height": 331.0,
        "FontSize": 36.0,
        "InitialTop": 1193.7954199394976,
        "InitialHeight": 195.8275,
        "TextblockHeight": 159.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "8cb2c5c333044adeb80916ea4204b446",
        "Title": "MULTI-DECK PRODUCE",
        "DescriptionText": "<Double click here to edit group description>",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "895a19fa868b492ebfc5ec6ac6ebfd70",
          "e106528229b24a3eab7ba452717194b0",
          "864eb8e0d4db4069bafdb9d9198b7d94"
        ],
        "HasNestedGroups": true,
        "Left": 3501.5256027810492,
        "Top": 595.38638274246784,
        "Width": 663.30094327786992,
        "Height": 775.40903719702976,
        "FontSize": 36.0,
        "InitialTop": 668.38638274246784,
        "InitialHeight": 162.0,
        "TextblockHeight": 63.0,
        "Background": "#FFE8F7AD"
      }
    ],
    "X": 543.56113598692264,
    "Y": 393.44806992112274,
    "Zoom": 0.18493163346074915
  }
}