{
  "Uuid": "835f952c-e6fa-4cfc-8ced-085e223da08a",
  "IsCustomNode": false,
  "Description": "",
  "Name": "05_Write-CA-Legend",
  "ElementResolver": {
    "ResolutionMap": {}
  },
  "Inputs": [],
  "Outputs": [],
  "Nodes": [
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"DSP Comp Ref\";",
      "Id": "3a938488321347ab831291ade1c35e17",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "8af77140335f41e18d174df8ac0e5574",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "CoreNodeModels.Watch, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "6a3a0d0201cc494e88110c9f4dc9d04d",
      "Inputs": [
        {
          "Id": "65d9079314874e45b2889f03180443f6",
          "Name": "",
          "Description": "Node to show output from",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "33af219081ed45b6b1d257d33d52da80",
          "Name": "",
          "Description": "Node output",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Visualize the node's output"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\r\nclr.AddReference(\"RevitAPI\")\r\nclr.AddReference(\"RevitServices\")\r\nfrom Autodesk.Revit.DB import *\r\nfrom RevitServices.Persistence import DocumentManager\r\n\r\n# Get the active document\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\n\r\n# Get all views\r\ncollector = FilteredElementCollector(doc).OfClass(View)\r\n\r\n# Filter only Legend Views\r\nlegend_views = [view for view in collector if view.ViewType == ViewType.Legend]\r\n\r\n# Output the list of legend views\r\nOUT = legend_views\r\n",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "73accd101e594998a13178c844c45812",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "2f367cf3ffb740afab8a2a10e4d77846",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\r\nclr.AddReference(\"RevitAPI\")\r\nclr.AddReference(\"RevitServices\")\r\nfrom Autodesk.Revit.DB import *\r\nfrom RevitServices.Persistence import DocumentManager\r\n\r\n# Inputs\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\n\r\n# Debugging step: check if input exists and its type\r\nif len(IN) < 1:\r\n    OUT = \"Error: Input list is empty. Please provide an input string for the legend name.\"\r\n    raise SystemExit\r\n\r\n# Attempt to retrieve the legend name, and handle if it fails\r\ntry:\r\n    legend_name = IN[0]\r\n    # Debugging: print input type and content to see what is being received\r\n    OUT = f\"Input received: Type = {type(legend_name)}, Content = {legend_name}\"\r\nexcept IndexError:\r\n    OUT = \"Error: Unable to read input from IN[0]. Please verify the input connection.\"\r\n    raise SystemExit\r\n\r\n# Ensure the input is of the correct type (str)\r\nif not isinstance(legend_name, str):\r\n    OUT = f\"Error: Input must be a string, received type {type(legend_name)}. Please use a string node.\"\r\n    raise SystemExit\r\n\r\n# Get all views in the document\r\ncollector = FilteredElementCollector(doc).OfClass(View)\r\n\r\n# Filter only Legend Views with the specified name\r\nspecific_legend = None\r\nfor view in collector:\r\n    if view.ViewType == ViewType.Legend and view.Name.strip() == legend_name.strip():\r\n        specific_legend = view\r\n        break\r\n\r\n# Check if the legend was found and output the result\r\nif specific_legend is None:\r\n    OUT = f\"Legend with name '{legend_name}' not found.\"\r\nelse:\r\n    OUT = specific_legend\r\n",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "9ad778fd162047ed81d4b937a126e37c",
      "Inputs": [
        {
          "Id": "16068f94dad24d9b8e86cf66242121ad",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "93d9b2a22db147c1a9d88d435429e845",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": true,
      "Id": "501b048d7d0d418093f6588230ae56b1",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "ad7a4d5ea57748d0856e6fa3ffa6acc0",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Selection between a true and false."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSVarArgFunction, DynamoCore",
      "FunctionSignature": "DSCore.String.Join@string,string[]",
      "FunctionType": "VariableArgument",
      "NodeType": "FunctionNode",
      "Id": "27d6a102833e4387957fb35a6cacf317",
      "Inputs": [
        {
          "Id": "fc64212e72d14417bab4e6dc6cf99a18",
          "Name": "separator",
          "Description": "String to be inserted between joined strings.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "0b739b4257104e7b8b9d3ca352e7293e",
          "Name": "string0",
          "Description": "Strings to be joined into a single string.\n\nstring[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "2fe93ddf962443598310de08bb3f6d11",
          "Name": "string",
          "Description": "A string made from the list of strings including the separator character.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Concatenates multiple strings into a single string, inserting the given separator between each joined string.\n\nString.Join (separator: string, strings: string[]): string"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSOffice.Data.ImportExcel@var,string,bool,bool",
      "Id": "19e77731cca74c5e95d753a61069d435",
      "Inputs": [
        {
          "Id": "1fd90d011ac04d8a86aad1ff79d5ebbd",
          "Name": "file",
          "Description": "File representing the Excel workbook\n\nvar",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "9841d70967194d6ea7cf5d78d326366a",
          "Name": "sheetName",
          "Description": "Name of the worksheet containing data\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "3f6e02ed2d7e4baba77ba1d1519697aa",
          "Name": "readAsStrings",
          "Description": "Toggle to read cells as strings\n\nbool\nDefault value : false",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "a7cbb22f15a94b8a8f5c36351af776d8",
          "Name": "showExcel",
          "Description": "Toggle to show excel's main window\n\nbool\nDefault value : true",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "ea2cd0d3a07944dd9ed531bf6b969614",
          "Name": "data",
          "Description": "Rows of data from the Excel worksheet",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Read data from a Microsoft Excel spreadsheet. Data is read by row and returned in a series of lists by row. Rows and columns are zero-indexed; for example, the value in cell A1 will appear in the data list at [0,0]. This node requires Microsoft Excel to be installed.\n\nData.ImportExcel (file: var, sheetName: string, readAsStrings: bool = false, showExcel: bool = true): var[][]"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.StringInput, CoreNodeModels",
      "NodeType": "StringInputNode",
      "InputValue": "RevitExtraction",
      "Id": "63394fe975de4bd190db141f8a040e51",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "b74893368a73420b815b4d66aaef4e62",
          "Name": "",
          "Description": "String",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Creates a string."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.FileObject, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "47ecfcee36264a11a3fdb28b4233eb9b",
      "Inputs": [
        {
          "Id": "7ab0e259cfed4bd1b4e2a8b25d3bcc88",
          "Name": "path",
          "Description": "Path to the file.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "aac56490dcfc43ae9c0bb1682608c211",
          "Name": "file",
          "Description": "File object",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Creates a file object from a path."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSVarArgFunction, DynamoCore",
      "FunctionSignature": "DSCore.IO.FileSystem.CombinePath@string[]",
      "FunctionType": "VariableArgument",
      "NodeType": "FunctionNode",
      "Id": "70b12d9fb1834b9a89e5ed18da39e796",
      "Inputs": [
        {
          "Id": "f1bb329babe14c75ac36e4bcbb84267c",
          "Name": "string0",
          "Description": "Strings to combine into a path\n\nstring[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "fb1686ca102a44d48a0b31ec09d429da",
          "Name": "string1",
          "Description": "string[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "1778607a2a5243759031935e9ba9a93b",
          "Name": "string",
          "Description": "Combined file path",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Combines multiple strings into a single file path.\n\nFileSystem.CombinePath (strings: string[]): string"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"\\\\\";",
      "Id": "aeb5f99f742d430394e4b475037bd9b2",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "7d23fa33421743b39ddfeafa1108d46f",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSVarArgFunction, DynamoCore",
      "FunctionSignature": "DSCore.String.Join@string,string[]",
      "FunctionType": "VariableArgument",
      "NodeType": "FunctionNode",
      "Id": "2780564aeb9042b09cdece32b67d4aa1",
      "Inputs": [
        {
          "Id": "71e7b9fee17945e69121a7fa4d797a81",
          "Name": "separator",
          "Description": "String to be inserted between joined strings.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "9d6cce56c5584ec08cfec4609c95b79d",
          "Name": "string0",
          "Description": "Strings to be joined into a single string.\n\nstring[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "a1428efa0b1c420eb4491c7dabdb530d",
          "Name": "string",
          "Description": "A string made from the list of strings including the separator character.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Concatenates multiple strings into a single string, inserting the given separator between each joined string.\n\nString.Join (separator: string, strings: string[]): string"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"\\\\\";",
      "Id": "ed6e5ffec7b14ea882d70db0a0accc3d",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "c02ae76413dd4615a2b53c9a8bb600da",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.LastItem@var[]..[]",
      "Id": "f299887cf765427ba274a6960e077353",
      "Inputs": [
        {
          "Id": "a2c4acd75ba743b2bf013512a200c378",
          "Name": "list",
          "Description": "List to get the last item of\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "28a2c83a9f844dbaadf15f28948cca19",
          "Name": "item",
          "Description": "Last item in the list",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Retrieves the last item in a list.\n\nList.LastItem (list: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSVarArgFunction, DynamoCore",
      "FunctionSignature": "DSCore.String.Split@string,string[]",
      "FunctionType": "VariableArgument",
      "NodeType": "FunctionNode",
      "Id": "7f629a6390f74c5285a9c992ec3b6c75",
      "Inputs": [
        {
          "Id": "5e74f31659d14bb8bf4ad0e3a051f615",
          "Name": "string",
          "Description": "String to split up\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "4feff7ccfd384b97ae922279f0c684dc",
          "Name": "separator0",
          "Description": "Strings that, if present, determine the end and start of a split.\n\nstring[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "0fe7798f395747bcab3a7c06332ce12c",
          "Name": "strings",
          "Description": "List of strings made from the input string",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Divides a single string into a list of strings, with divisions determined by the given separator strings.\n\nString.Split (string: string, separators: string[]): string[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"\\\\\";",
      "Id": "50840014c7a24cc8905bbb65bfccfa35",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "a2c1b5a23508469693cd2ecb50e164c1",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "CoreNodeModels.FromObject, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "100500e5e8ca4c4f8074d092046414ff",
      "Inputs": [
        {
          "Id": "5cfa8fae9d524e6dbd372a756a8b92bd",
          "Name": "object",
          "Description": "Object to be serialized",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "52450eb6183d438587066cdde5fe45bc",
          "Name": "string",
          "Description": "String representation of the object",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Convert an object to a string representation."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "-1;",
      "Id": "732105eb9883459391d8ca2874a4a82f",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "f3bf1e127dc84392baac661761473675",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"\\\\\";",
      "Id": "b0310d183dcb4618864cee7982fc7783",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "4748ffee74eb4724a5379f0a1ad4ada3",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.DropItems@var[]..[],int",
      "Id": "3495deabb3564e158d4e4df9aad94c10",
      "Inputs": [
        {
          "Id": "0100a0a5ad754ece939ab5243e16584c",
          "Name": "list",
          "Description": "List to remove items from.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "827f32ac437f433f8e203b322c76a06b",
          "Name": "amount",
          "Description": "Amount of items to remove. If negative, items are removed from the end of the list.\n\nint",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "cf4818fcf1ce42a9bafa63de1f18f4dc",
          "Name": "list",
          "Description": "List of remaining items.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Removes an amount of items from the start of the list. If the amount is a negative value, items are removed from the end of the list.\n\nList.DropItems (list: var[]..[], amount: int): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSVarArgFunction, DynamoCore",
      "FunctionSignature": "DSCore.String.Split@string,string[]",
      "FunctionType": "VariableArgument",
      "NodeType": "FunctionNode",
      "Id": "c21f21ce35564f9c8d9e7940504655c6",
      "Inputs": [
        {
          "Id": "918fdbd7dfa2474ab0d4a4e6cd712eff",
          "Name": "string",
          "Description": "String to split up\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "035572c80e574e749c050f36688ef02e",
          "Name": "separator0",
          "Description": "Strings that, if present, determine the end and start of a split.\n\nstring[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "accd2a24d3124481bcc2e3d8a9cc4d85",
          "Name": "strings",
          "Description": "List of strings made from the input string",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Divides a single string into a list of strings, with divisions determined by the given separator strings.\n\nString.Split (string: string, separators: string[]): string[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSVarArgFunction, DynamoCore",
      "FunctionSignature": "DSCore.String.Join@string,string[]",
      "FunctionType": "VariableArgument",
      "NodeType": "FunctionNode",
      "Id": "680cca8619d44faeaee0da439d6b7eac",
      "Inputs": [
        {
          "Id": "09571e0f7cf745ad87f2e1cabc3c780a",
          "Name": "separator",
          "Description": "String to be inserted between joined strings.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "f5fcc6727f944c76bf17e26f900829ff",
          "Name": "string0",
          "Description": "Strings to be joined into a single string.\n\nstring[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "ae9881598b6948dea84c86b6f57dd586",
          "Name": "string",
          "Description": "A string made from the list of strings including the separator character.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Concatenates multiple strings into a single string, inserting the given separator between each joined string.\n\nString.Join (separator: string, strings: string[]): string"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Application.Document.FilePath",
      "Id": "b03b5de533ad46d1946cfb01737f875c",
      "Inputs": [
        {
          "Id": "71d3705deb2b48df81735c7e8ba6d4f5",
          "Name": "document",
          "Description": "Revit.Application.Document",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "249029be1c524fa1b7b7b28498bd195e",
          "Name": "string",
          "Description": "string",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "The full path of the Document.\n\nDocument.FilePath: string"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"\\\\\";",
      "Id": "2f837339110c4581999d12f7398f367f",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "b00aecc67a7f4f0288299bbab8ac278b",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.FileObject, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "e2490c25dbe547c5a580ce6d2157e0bc",
      "Inputs": [
        {
          "Id": "616c2a89234a45cf8ad8c8465235ba68",
          "Name": "path",
          "Description": "Path to the file.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "87602e2a5da5475f9512a05b6dbaf62c",
          "Name": "file",
          "Description": "File object",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Creates a file object from a path."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.Filename, CoreNodeModels",
      "HintPath": "C:\\_Albertsons\\x17 (Lineal Footage Analysis)\\Templates\\02_Master-Check.xlsx",
      "InputValue": "Templates\\02_Master-Check.xlsx",
      "NodeType": "ExtensionNode",
      "Id": "636651ca158d43f7a5f22b1311c67c41",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "19112b14ead441dca7ac21adcc4a4d7f",
          "Name": "",
          "Description": "File Path",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows you to select a file on the system to get its file path."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Application.Document.Current",
      "Id": "047a847b2d9445a08d05744b2e545025",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "caff3030cd304f7da798d75b9b7a7434",
          "Name": "Document",
          "Description": "Document",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get the current document\n\nDocument.Current: Document"
    },
    {
      "ConcreteType": "CoreNodeModels.Watch, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "1ab8c488dc8d449a867be35376a6604e",
      "Inputs": [
        {
          "Id": "8ac3815b8bf24755b57aede1b38300fd",
          "Name": "",
          "Description": "Node to show output from",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "6a6049ed83534ba9ba133d428397a497",
          "Name": "",
          "Description": "Node output",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Visualize the node's output"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\r\nclr.AddReference(\"RevitAPI\")\r\nclr.AddReference(\"RevitServices\")\r\nfrom Autodesk.Revit.DB import *\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom collections import defaultdict\r\nimport re\r\n\r\n# Inputs\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nlegend_view = UnwrapElement(IN[0])  # Legend View input\r\ntarget_row_start_text = IN[1]  # The text of the main category to extract (e.g., \"FROZEN FOOD\")\r\n\r\n# Collect all TextNote elements in the Legend View\r\ncollector = FilteredElementCollector(doc, legend_view.Id).OfClass(TextNote)\r\ntext_notes = []\r\n\r\nfor text_note in collector:\r\n    location = text_note.Coord  # XYZ location of the Text Note\r\n    element_data = {\r\n        \"ElementId\": text_note.Id.IntegerValue,\r\n        \"Text\": text_note.Text,\r\n        \"Location\": location\r\n    }\r\n    text_notes.append(element_data)\r\n\r\n# Preprocess the target text to remove extra whitespace and normalize line breaks\r\ntarget_row_start_text_clean = re.sub(r'\\s+', ' ', target_row_start_text.strip()).upper()\r\n\r\n# Group text notes by rows (based on Y-coordinate)\r\ntolerance = 0.1  # Increased tolerance for determining whether two text notes are in the same row\r\nrows = defaultdict(list)\r\n\r\nfor text_note in text_notes:\r\n    y_coord = text_note[\"Location\"].Y\r\n    found_row = False\r\n    for key in rows.keys():\r\n        if abs(y_coord - key) < tolerance:\r\n            rows[key].append(text_note)\r\n            found_row = True\r\n            break\r\n    if not found_row:\r\n        rows[y_coord].append(text_note)\r\n\r\n# Sort rows by Y-coordinate (descending order for top to bottom)\r\nsorted_rows = sorted(rows.items(), key=lambda x: -x[0])\r\n\r\n# Sort elements within each row by X-coordinate (ascending order for left to right)\r\nsorted_rows_data = []\r\nfor y_value, elements in sorted_rows:\r\n    sorted_elements = sorted(elements, key=lambda e: e[\"Location\"].X)\r\n    sorted_rows_data.append(sorted_elements)\r\n\r\n# Find the row that starts with the target_row_start_text and capture all related rows\r\ntarget_rows_data = []\r\ncapture = False\r\n\r\nfor row in sorted_rows_data:\r\n    # Clean up the text of each element in the row\r\n    for element in row:\r\n        element_text_clean = re.sub(r'\\s+', ' ', element[\"Text\"].strip()).upper()\r\n        # If we find the target row, start capturing rows\r\n        if element_text_clean == target_row_start_text_clean:\r\n            capture = True\r\n\r\n    # Capture the row if we are in the target section\r\n    if capture:\r\n        target_rows_data.append(row)\r\n\r\n    # Stop capturing if a new major heading is found (excluding current target)\r\n    # You can modify this condition based on how headings are defined in your table\r\n    if capture and len(row) > 0:\r\n        first_text = re.sub(r'\\s+', ' ', row[0][\"Text\"].strip()).upper()\r\n        if first_text != target_row_start_text_clean and first_text.isupper() and len(first_text.split()) == 1:\r\n            break\r\n\r\n# Output all the rows starting with and under the target_row_start_text\r\nOUT = target_rows_data\r\n",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "d66d2e2ec4814ca6a5af7458edf72260",
      "Inputs": [
        {
          "Id": "8c557a846ed94911ac3253df3765b1a6",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "cd9294dda096406eb279348f2ab2c570",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "4ec26b6e17b64c14b513f82ab161493b",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"PRODUCE\";",
      "Id": "1913e1c67cbb4ef380a2c9470a433e20",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "a9665d1f1cdc4d56b1e5386683863977",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"FROZEN FOOD\";",
      "Id": "b2b41f80a8c84c00bb892508b1fc8ae2",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "5226e9ab98624e5f9ed1b2eb9c04a823",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\r\nclr.AddReference(\"RevitAPI\")\r\nclr.AddReference(\"RevitServices\")\r\nfrom Autodesk.Revit.DB import *\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom collections import defaultdict\r\nimport re\r\n\r\n# Inputs\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nlegend_view = UnwrapElement(IN[0])  # Legend View input\r\ntarget_row_start_text = IN[1]  # The text of the main category to extract (e.g., \"FROZEN FOOD\")\r\n\r\n# Collect all TextNote elements in the Legend View\r\ncollector = FilteredElementCollector(doc, legend_view.Id).OfClass(TextNote)\r\ntext_notes = []\r\n\r\nfor text_note in collector:\r\n    location = text_note.Coord  # XYZ location of the Text Note\r\n    element_data = {\r\n        \"ElementId\": text_note.Id.IntegerValue,\r\n        \"Text\": text_note.Text,\r\n        \"Location\": location\r\n    }\r\n    text_notes.append(element_data)\r\n\r\n# Preprocess the target text to remove extra whitespace and normalize line breaks\r\ntarget_row_start_text_clean = re.sub(r'\\s+', ' ', target_row_start_text.strip()).upper()\r\n\r\n# Group text notes by rows (based on Y-coordinate)\r\ntolerance = 0.1  # Increased tolerance for determining whether two text notes are in the same row\r\nrows = defaultdict(list)\r\n\r\nfor text_note in text_notes:\r\n    y_coord = text_note[\"Location\"].Y\r\n    found_row = False\r\n    for key in rows.keys():\r\n        if abs(y_coord - key) < tolerance:\r\n            rows[key].append(text_note)\r\n            found_row = True\r\n            break\r\n    if not found_row:\r\n        rows[y_coord].append(text_note)\r\n\r\n# Sort rows by Y-coordinate (descending order for top to bottom)\r\nsorted_rows = sorted(rows.items(), key=lambda x: -x[0])\r\n\r\n# Sort elements within each row by X-coordinate (ascending order for left to right)\r\nsorted_rows_data = []\r\nfor y_value, elements in sorted_rows:\r\n    sorted_elements = sorted(elements, key=lambda e: e[\"Location\"].X)\r\n    sorted_rows_data.append(sorted_elements)\r\n\r\n# Find the row that starts with the target_row_start_text and capture all related rows\r\ntarget_rows_data = []\r\ncapture = False\r\n\r\nfor row in sorted_rows_data:\r\n    # Clean up the text of each element in the row\r\n    for element in row:\r\n        element_text_clean = re.sub(r'\\s+', ' ', element[\"Text\"].strip()).upper()\r\n        # If we find the target row, start capturing rows\r\n        if element_text_clean == target_row_start_text_clean:\r\n            capture = True\r\n\r\n    # Capture the row if we are in the target section\r\n    if capture:\r\n        target_rows_data.append(row)\r\n\r\n    # Stop capturing if a new major heading is found (excluding current target)\r\n    # You can modify this condition based on how headings are defined in your table\r\n    if capture and len(row) > 0:\r\n        first_text = re.sub(r'\\s+', ' ', row[0][\"Text\"].strip()).upper()\r\n        if first_text != target_row_start_text_clean and first_text.isupper() and len(first_text.split()) == 1:\r\n            break\r\n\r\n# Output all the rows starting with and under the target_row_start_text\r\nOUT = target_rows_data\r\n",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "b20c1ed1825f4405b13508576c1cd8a1",
      "Inputs": [
        {
          "Id": "580df52d18a84935b5fd3912b13c1bdb",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "7a8e3557bdc54350a9d4b8aca767dae0",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "c072d5437c064d6d8697002d56c667fd",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"DAIRY\";",
      "Id": "53b11b5e7a4b46088f8c8415503b1612",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "ec1870b8d3b04dda8f0cf261d4b23266",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\r\nclr.AddReference(\"RevitAPI\")\r\nclr.AddReference(\"RevitServices\")\r\nfrom Autodesk.Revit.DB import *\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom collections import defaultdict\r\nimport re\r\n\r\n# Inputs\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nlegend_view = UnwrapElement(IN[0])  # Legend View input\r\ntarget_row_start_text = IN[1]  # The text of the main category to extract (e.g., \"FROZEN FOOD\")\r\n\r\n# Collect all TextNote elements in the Legend View\r\ncollector = FilteredElementCollector(doc, legend_view.Id).OfClass(TextNote)\r\ntext_notes = []\r\n\r\nfor text_note in collector:\r\n    location = text_note.Coord  # XYZ location of the Text Note\r\n    element_data = {\r\n        \"ElementId\": text_note.Id.IntegerValue,\r\n        \"Text\": text_note.Text,\r\n        \"Location\": location\r\n    }\r\n    text_notes.append(element_data)\r\n\r\n# Preprocess the target text to remove extra whitespace and normalize line breaks\r\ntarget_row_start_text_clean = re.sub(r'\\s+', ' ', target_row_start_text.strip()).upper()\r\n\r\n# Group text notes by rows (based on Y-coordinate)\r\ntolerance = 0.1  # Increased tolerance for determining whether two text notes are in the same row\r\nrows = defaultdict(list)\r\n\r\nfor text_note in text_notes:\r\n    y_coord = text_note[\"Location\"].Y\r\n    found_row = False\r\n    for key in rows.keys():\r\n        if abs(y_coord - key) < tolerance:\r\n            rows[key].append(text_note)\r\n            found_row = True\r\n            break\r\n    if not found_row:\r\n        rows[y_coord].append(text_note)\r\n\r\n# Sort rows by Y-coordinate (descending order for top to bottom)\r\nsorted_rows = sorted(rows.items(), key=lambda x: -x[0])\r\n\r\n# Sort elements within each row by X-coordinate (ascending order for left to right)\r\nsorted_rows_data = []\r\nfor y_value, elements in sorted_rows:\r\n    sorted_elements = sorted(elements, key=lambda e: e[\"Location\"].X)\r\n    sorted_rows_data.append(sorted_elements)\r\n\r\n# Find the row that starts with the target_row_start_text and capture all related rows\r\ntarget_rows_data = []\r\ncapture = False\r\n\r\nfor row in sorted_rows_data:\r\n    # Clean up the text of each element in the row\r\n    for element in row:\r\n        element_text_clean = re.sub(r'\\s+', ' ', element[\"Text\"].strip()).upper()\r\n        # If we find the target row, start capturing rows\r\n        if element_text_clean == target_row_start_text_clean:\r\n            capture = True\r\n\r\n    # Capture the row if we are in the target section\r\n    if capture:\r\n        target_rows_data.append(row)\r\n\r\n    # Stop capturing if a new major heading is found (excluding current target)\r\n    # You can modify this condition based on how headings are defined in your table\r\n    if capture and len(row) > 0:\r\n        first_text = re.sub(r'\\s+', ' ', row[0][\"Text\"].strip()).upper()\r\n        if first_text != target_row_start_text_clean and first_text.isupper() and len(first_text.split()) == 1:\r\n            break\r\n\r\n# Output all the rows starting with and under the target_row_start_text\r\nOUT = target_rows_data\r\n",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "9f7043f30c1949299051d9f6ae55038e",
      "Inputs": [
        {
          "Id": "4a0ba75d407d411e9fec9e1dab98e5ba",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "42e5269d1692493cb55c19689f6a12b7",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "a0dc4cac00ac44d08549873ef04d4c4c",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"SHELVING\";",
      "Id": "991c88e22d8d45458cecee2f45891966",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "4cd533d9145f45b6b7222ce9d243919e",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\r\nclr.AddReference(\"RevitAPI\")\r\nclr.AddReference(\"RevitServices\")\r\nfrom Autodesk.Revit.DB import *\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom collections import defaultdict\r\nimport re\r\n\r\n# Inputs\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nlegend_view = UnwrapElement(IN[0])  # Legend View input\r\ntarget_row_start_text = IN[1]  # The text of the main category to extract (e.g., \"FROZEN FOOD\")\r\n\r\n# Collect all TextNote elements in the Legend View\r\ncollector = FilteredElementCollector(doc, legend_view.Id).OfClass(TextNote)\r\ntext_notes = []\r\n\r\nfor text_note in collector:\r\n    location = text_note.Coord  # XYZ location of the Text Note\r\n    element_data = {\r\n        \"ElementId\": text_note.Id.IntegerValue,\r\n        \"Text\": text_note.Text,\r\n        \"Location\": location\r\n    }\r\n    text_notes.append(element_data)\r\n\r\n# Preprocess the target text to remove extra whitespace and normalize line breaks\r\ntarget_row_start_text_clean = re.sub(r'\\s+', ' ', target_row_start_text.strip()).upper()\r\n\r\n# Group text notes by rows (based on Y-coordinate)\r\ntolerance = 0.1  # Increased tolerance for determining whether two text notes are in the same row\r\nrows = defaultdict(list)\r\n\r\nfor text_note in text_notes:\r\n    y_coord = text_note[\"Location\"].Y\r\n    found_row = False\r\n    for key in rows.keys():\r\n        if abs(y_coord - key) < tolerance:\r\n            rows[key].append(text_note)\r\n            found_row = True\r\n            break\r\n    if not found_row:\r\n        rows[y_coord].append(text_note)\r\n\r\n# Sort rows by Y-coordinate (descending order for top to bottom)\r\nsorted_rows = sorted(rows.items(), key=lambda x: -x[0])\r\n\r\n# Sort elements within each row by X-coordinate (ascending order for left to right)\r\nsorted_rows_data = []\r\nfor y_value, elements in sorted_rows:\r\n    sorted_elements = sorted(elements, key=lambda e: e[\"Location\"].X)\r\n    sorted_rows_data.append(sorted_elements)\r\n\r\n# Find the row that starts with the target_row_start_text and capture all related rows\r\ntarget_rows_data = []\r\ncapture = False\r\n\r\nfor row in sorted_rows_data:\r\n    # Clean up the text of each element in the row\r\n    for element in row:\r\n        element_text_clean = re.sub(r'\\s+', ' ', element[\"Text\"].strip()).upper()\r\n        # If we find the target row, start capturing rows\r\n        if element_text_clean == target_row_start_text_clean:\r\n            capture = True\r\n\r\n    # Capture the row if we are in the target section\r\n    if capture:\r\n        target_rows_data.append(row)\r\n\r\n    # Stop capturing if a new major heading is found (excluding current target)\r\n    # You can modify this condition based on how headings are defined in your table\r\n    if capture and len(row) > 0:\r\n        first_text = re.sub(r'\\s+', ' ', row[0][\"Text\"].strip()).upper()\r\n        if first_text != target_row_start_text_clean and first_text.isupper() and len(first_text.split()) == 1:\r\n            break\r\n\r\n# Output all the rows starting with and under the target_row_start_text\r\nOUT = target_rows_data\r\n",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "61ec85bb2e094d6a932794dea958775a",
      "Inputs": [
        {
          "Id": "d5df6cea41954a8382de5063079ed36c",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "c301b6a3f58346089ead30a438f7a65f",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "18aa752110fd4aac9603d0ca87608859",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\r\nclr.AddReference(\"RevitAPI\")\r\nclr.AddReference(\"RevitServices\")\r\nfrom Autodesk.Revit.DB import *\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom collections import defaultdict\r\nimport re\r\n\r\n# Inputs\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nlegend_view = UnwrapElement(IN[0])  # Legend View input\r\ntarget_row_start_text = IN[1]  # The text of the main category to extract (e.g., \"FROZEN FOOD\")\r\n\r\n# Collect all TextNote elements in the Legend View\r\ncollector = FilteredElementCollector(doc, legend_view.Id).OfClass(TextNote)\r\ntext_notes = []\r\n\r\nfor text_note in collector:\r\n    location = text_note.Coord  # XYZ location of the Text Note\r\n    element_data = {\r\n        \"ElementId\": text_note.Id.IntegerValue,\r\n        \"Text\": text_note.Text,\r\n        \"Location\": location\r\n    }\r\n    text_notes.append(element_data)\r\n\r\n# Preprocess the target text to remove extra whitespace and normalize line breaks\r\ntarget_row_start_text_clean = re.sub(r'\\s+', ' ', target_row_start_text.strip()).upper()\r\n\r\n# Group text notes by rows (based on Y-coordinate)\r\ntolerance = 0.1  # Increased tolerance for determining whether two text notes are in the same row\r\nrows = defaultdict(list)\r\n\r\nfor text_note in text_notes:\r\n    y_coord = text_note[\"Location\"].Y\r\n    found_row = False\r\n    for key in rows.keys():\r\n        if abs(y_coord - key) < tolerance:\r\n            rows[key].append(text_note)\r\n            found_row = True\r\n            break\r\n    if not found_row:\r\n        rows[y_coord].append(text_note)\r\n\r\n# Sort rows by Y-coordinate (descending order for top to bottom)\r\nsorted_rows = sorted(rows.items(), key=lambda x: -x[0])\r\n\r\n# Sort elements within each row by X-coordinate (ascending order for left to right)\r\nsorted_rows_data = []\r\nfor y_value, elements in sorted_rows:\r\n    sorted_elements = sorted(elements, key=lambda e: e[\"Location\"].X)\r\n    sorted_rows_data.append(sorted_elements)\r\n\r\n# Find the row that starts with the target_row_start_text and capture all related rows\r\ntarget_rows_data = []\r\ncapture = False\r\n\r\nfor row in sorted_rows_data:\r\n    # Clean up the text of each element in the row\r\n    for element in row:\r\n        element_text_clean = re.sub(r'\\s+', ' ', element[\"Text\"].strip()).upper()\r\n        # If we find the target row, start capturing rows\r\n        if element_text_clean == target_row_start_text_clean:\r\n            capture = True\r\n\r\n    # Capture the row if we are in the target section\r\n    if capture:\r\n        target_rows_data.append(row)\r\n\r\n    # Stop capturing if a new major heading is found (excluding current target)\r\n    # You can modify this condition based on how headings are defined in your table\r\n    if capture and len(row) > 0:\r\n        first_text = re.sub(r'\\s+', ' ', row[0][\"Text\"].strip()).upper()\r\n        if first_text != target_row_start_text_clean and first_text.isupper() and len(first_text.split()) == 1:\r\n            break\r\n\r\n# Output all the rows starting with and under the target_row_start_text\r\nOUT = target_rows_data\r\n",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "4154119bb6c34893be03febf733359c9",
      "Inputs": [
        {
          "Id": "bb01a992bc604596bae5f54629acc7a1",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "f4bcdc5c138740f381d26753bfc7f472",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "482b78cda3154bffa351a6a81bad69af",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"SEAFOOD & MEAT\";",
      "Id": "605c0f8e61f647f885b549e157f8c377",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "8068cff9dc8147b9a1d52fd8e9d7dd80",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\r\nclr.AddReference(\"RevitAPI\")\r\nclr.AddReference(\"RevitServices\")\r\nfrom Autodesk.Revit.DB import *\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom collections import defaultdict\r\nimport re\r\n\r\n# Inputs\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nlegend_view = UnwrapElement(IN[0])  # Legend View input\r\ntarget_row_start_text = IN[1]  # The text of the main category to extract (e.g., \"FROZEN FOOD\")\r\n\r\n# Collect all TextNote elements in the Legend View\r\ncollector = FilteredElementCollector(doc, legend_view.Id).OfClass(TextNote)\r\ntext_notes = []\r\n\r\nfor text_note in collector:\r\n    location = text_note.Coord  # XYZ location of the Text Note\r\n    element_data = {\r\n        \"ElementId\": text_note.Id.IntegerValue,\r\n        \"Text\": text_note.Text,\r\n        \"Location\": location\r\n    }\r\n    text_notes.append(element_data)\r\n\r\n# Preprocess the target text to remove extra whitespace and normalize line breaks\r\ntarget_row_start_text_clean = re.sub(r'\\s+', ' ', target_row_start_text.strip()).upper()\r\n\r\n# Group text notes by rows (based on Y-coordinate)\r\ntolerance = 0.1  # Increased tolerance for determining whether two text notes are in the same row\r\nrows = defaultdict(list)\r\n\r\nfor text_note in text_notes:\r\n    y_coord = text_note[\"Location\"].Y\r\n    found_row = False\r\n    for key in rows.keys():\r\n        if abs(y_coord - key) < tolerance:\r\n            rows[key].append(text_note)\r\n            found_row = True\r\n            break\r\n    if not found_row:\r\n        rows[y_coord].append(text_note)\r\n\r\n# Sort rows by Y-coordinate (descending order for top to bottom)\r\nsorted_rows = sorted(rows.items(), key=lambda x: -x[0])\r\n\r\n# Sort elements within each row by X-coordinate (ascending order for left to right)\r\nsorted_rows_data = []\r\nfor y_value, elements in sorted_rows:\r\n    sorted_elements = sorted(elements, key=lambda e: e[\"Location\"].X)\r\n    sorted_rows_data.append(sorted_elements)\r\n\r\n# Find the row that starts with the target_row_start_text and capture all related rows\r\ntarget_rows_data = []\r\ncapture = False\r\n\r\nfor row in sorted_rows_data:\r\n    # Clean up the text of each element in the row\r\n    for element in row:\r\n        element_text_clean = re.sub(r'\\s+', ' ', element[\"Text\"].strip()).upper()\r\n        # If we find the target row, start capturing rows\r\n        if element_text_clean == target_row_start_text_clean:\r\n            capture = True\r\n\r\n    # Capture the row if we are in the target section\r\n    if capture:\r\n        target_rows_data.append(row)\r\n\r\n    # Stop capturing if a new major heading is found (excluding current target)\r\n    # You can modify this condition based on how headings are defined in your table\r\n    if capture and len(row) > 0:\r\n        first_text = re.sub(r'\\s+', ' ', row[0][\"Text\"].strip()).upper()\r\n        if first_text != target_row_start_text_clean and first_text.isupper() and len(first_text.split()) == 1:\r\n            break\r\n\r\n# Output all the rows starting with and under the target_row_start_text\r\nOUT = target_rows_data\r\n",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "08827ff33ece48baacc2f35836b1404d",
      "Inputs": [
        {
          "Id": "ba1e9e2308564d2d879c9dfe121f327d",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "5e7fe72322aa4bc59c7b15694888fb0d",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "624a017cde3a4b61a1a53265db2af40a",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"TAB\";",
      "Id": "08ea1a7759b440d4aaeaed74642eb49d",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "ffb529dcbb914259ae1409af1f91d104",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "CoreNodeModels.Watch, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "6e00512ac8014b2b9e88f4d03b8c1ab8",
      "Inputs": [
        {
          "Id": "cc223f4d91344d1191a56d72b23280cc",
          "Name": "",
          "Description": "Node to show output from",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "99acbce6842d42bbbaef753de3e18a2a",
          "Name": "",
          "Description": "Node output",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Visualize the node's output"
    },
    {
      "ConcreteType": "CoreNodeModels.Watch, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "e85d30846c0f46698d65e28befa3b4ac",
      "Inputs": [
        {
          "Id": "d4cbf567daae4cdfb3dde6e919fa1035",
          "Name": "",
          "Description": "Node to show output from",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "130b814bfc9442e598acdf4af847d893",
          "Name": "",
          "Description": "Node output",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Visualize the node's output"
    },
    {
      "ConcreteType": "CoreNodeModels.Watch, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "8be935b4e9dd4deda38b3c2559ac7be3",
      "Inputs": [
        {
          "Id": "30b7181926b547249eefeff19d971df1",
          "Name": "",
          "Description": "Node to show output from",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "61fcc7a3b59344c7b6a2f78912e5d5a4",
          "Name": "",
          "Description": "Node output",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Visualize the node's output"
    },
    {
      "ConcreteType": "CoreNodeModels.Watch, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "eceb49a83e56430991697f046d92bc4b",
      "Inputs": [
        {
          "Id": "52bbbcfc360b4498a93ededd35fe27c6",
          "Name": "",
          "Description": "Node to show output from",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "2634e5a3eb20475a859d5a7f30fd6ee1",
          "Name": "",
          "Description": "Node output",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Visualize the node's output"
    },
    {
      "ConcreteType": "CoreNodeModels.Watch, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "732b6d04abe44732938df692914627ca",
      "Inputs": [
        {
          "Id": "9b9b8f5dcaf94be19806c7da3d28129c",
          "Name": "",
          "Description": "Node to show output from",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "ebb706708cc34171b69eec3955829f02",
          "Name": "",
          "Description": "Node output",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Visualize the node's output"
    },
    {
      "ConcreteType": "CoreNodeModels.Watch, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "b865945432094136b387ee73767ba469",
      "Inputs": [
        {
          "Id": "8cd077e5ae09478c90499096dda5ca86",
          "Name": "",
          "Description": "Node to show output from",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "305762c4313642f0ab006b4a1f927eca",
          "Name": "",
          "Description": "Node output",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Visualize the node's output"
    }
  ],
  "Connectors": [
    {
      "Start": "8af77140335f41e18d174df8ac0e5574",
      "End": "16068f94dad24d9b8e86cf66242121ad",
      "Id": "fc489a2981fc4230bdade53457f319c2",
      "IsHidden": "False"
    },
    {
      "Start": "2f367cf3ffb740afab8a2a10e4d77846",
      "End": "65d9079314874e45b2889f03180443f6",
      "Id": "b96841ded31e401887b5fb746536b061",
      "IsHidden": "False"
    },
    {
      "Start": "93d9b2a22db147c1a9d88d435429e845",
      "End": "8c557a846ed94911ac3253df3765b1a6",
      "Id": "e81c58170211409396694b488b4c5bcb",
      "IsHidden": "False"
    },
    {
      "Start": "93d9b2a22db147c1a9d88d435429e845",
      "End": "580df52d18a84935b5fd3912b13c1bdb",
      "Id": "fb56d4e170914ed08e640b1ac5766eb4",
      "IsHidden": "False"
    },
    {
      "Start": "93d9b2a22db147c1a9d88d435429e845",
      "End": "4a0ba75d407d411e9fec9e1dab98e5ba",
      "Id": "dbad771c32e744eaadd26aeed65083ee",
      "IsHidden": "False"
    },
    {
      "Start": "93d9b2a22db147c1a9d88d435429e845",
      "End": "d5df6cea41954a8382de5063079ed36c",
      "Id": "f4f7d2c5772d4e5299d333d6c23d35bc",
      "IsHidden": "False"
    },
    {
      "Start": "93d9b2a22db147c1a9d88d435429e845",
      "End": "bb01a992bc604596bae5f54629acc7a1",
      "Id": "1825377c3144434c8f5a9769bcde4f4c",
      "IsHidden": "False"
    },
    {
      "Start": "93d9b2a22db147c1a9d88d435429e845",
      "End": "ba1e9e2308564d2d879c9dfe121f327d",
      "Id": "f62d6a4e15584b55bcb7e2bf67503229",
      "IsHidden": "False"
    },
    {
      "Start": "ad7a4d5ea57748d0856e6fa3ffa6acc0",
      "End": "a7cbb22f15a94b8a8f5c36351af776d8",
      "Id": "db631e2f4d814f178d21428ebbd8cd12",
      "IsHidden": "False"
    },
    {
      "Start": "2fe93ddf962443598310de08bb3f6d11",
      "End": "7ab0e259cfed4bd1b4e2a8b25d3bcc88",
      "Id": "19c55f93d86a4efaa5c403eb3f1347bc",
      "IsHidden": "False"
    },
    {
      "Start": "ea2cd0d3a07944dd9ed531bf6b969614",
      "End": "8ac3815b8bf24755b57aede1b38300fd",
      "Id": "a27a4d3f8ff64b4181b4342ae8a8dc93",
      "IsHidden": "False"
    },
    {
      "Start": "b74893368a73420b815b4d66aaef4e62",
      "End": "9841d70967194d6ea7cf5d78d326366a",
      "Id": "785a6389439b41f5b7d186f642d5bf25",
      "IsHidden": "False"
    },
    {
      "Start": "aac56490dcfc43ae9c0bb1682608c211",
      "End": "1fd90d011ac04d8a86aad1ff79d5ebbd",
      "Id": "d09d7d0976a14834ac48e660efd505a6",
      "IsHidden": "False"
    },
    {
      "Start": "1778607a2a5243759031935e9ba9a93b",
      "End": "0b739b4257104e7b8b9d3ca352e7293e",
      "Id": "8923c5f483d64e3db56d6e0195cb3866",
      "IsHidden": "False"
    },
    {
      "Start": "7d23fa33421743b39ddfeafa1108d46f",
      "End": "fc64212e72d14417bab4e6dc6cf99a18",
      "Id": "97f3c52fabcc4db0aaaa324d5d5bbd62",
      "IsHidden": "False"
    },
    {
      "Start": "a1428efa0b1c420eb4491c7dabdb530d",
      "End": "fb1686ca102a44d48a0b31ec09d429da",
      "Id": "250851b8abec42898a9fe906db1e4224",
      "IsHidden": "False"
    },
    {
      "Start": "c02ae76413dd4615a2b53c9a8bb600da",
      "End": "71e7b9fee17945e69121a7fa4d797a81",
      "Id": "776c49f6c4a444628e06340b1fdc7c30",
      "IsHidden": "False"
    },
    {
      "Start": "28a2c83a9f844dbaadf15f28948cca19",
      "End": "9d6cce56c5584ec08cfec4609c95b79d",
      "Id": "c9e47277cab3436e99cd0b3fb2c5fee8",
      "IsHidden": "False"
    },
    {
      "Start": "0fe7798f395747bcab3a7c06332ce12c",
      "End": "a2c4acd75ba743b2bf013512a200c378",
      "Id": "3e4b6b0c69b14926ba8504844822272c",
      "IsHidden": "False"
    },
    {
      "Start": "a2c1b5a23508469693cd2ecb50e164c1",
      "End": "4feff7ccfd384b97ae922279f0c684dc",
      "Id": "314bbed4666f405e8570877a140e82c9",
      "IsHidden": "False"
    },
    {
      "Start": "52450eb6183d438587066cdde5fe45bc",
      "End": "5e74f31659d14bb8bf4ad0e3a051f615",
      "Id": "239425f6803443bdac2f990c14631982",
      "IsHidden": "False"
    },
    {
      "Start": "f3bf1e127dc84392baac661761473675",
      "End": "827f32ac437f433f8e203b322c76a06b",
      "Id": "3d579dfd55a6473a8cea6a2ad1a32707",
      "IsHidden": "False"
    },
    {
      "Start": "4748ffee74eb4724a5379f0a1ad4ada3",
      "End": "035572c80e574e749c050f36688ef02e",
      "Id": "66084403d2464303bddb62f1a266545a",
      "IsHidden": "False"
    },
    {
      "Start": "cf4818fcf1ce42a9bafa63de1f18f4dc",
      "End": "f5fcc6727f944c76bf17e26f900829ff",
      "Id": "e5c556b42a204439aee1ff5c900624ec",
      "IsHidden": "False"
    },
    {
      "Start": "accd2a24d3124481bcc2e3d8a9cc4d85",
      "End": "0100a0a5ad754ece939ab5243e16584c",
      "Id": "a0f2e234ea1041bf849cd302e5b802e4",
      "IsHidden": "False"
    },
    {
      "Start": "ae9881598b6948dea84c86b6f57dd586",
      "End": "f1bb329babe14c75ac36e4bcbb84267c",
      "Id": "03904dfffe524dab87571c967b1e9001",
      "IsHidden": "False"
    },
    {
      "Start": "249029be1c524fa1b7b7b28498bd195e",
      "End": "918fdbd7dfa2474ab0d4a4e6cd712eff",
      "Id": "57bae458fcb24eb183ce6c960b2a37d8",
      "IsHidden": "False"
    },
    {
      "Start": "b00aecc67a7f4f0288299bbab8ac278b",
      "End": "09571e0f7cf745ad87f2e1cabc3c780a",
      "Id": "29b44d6462194370a28b5139376b8e0d",
      "IsHidden": "False"
    },
    {
      "Start": "87602e2a5da5475f9512a05b6dbaf62c",
      "End": "5cfa8fae9d524e6dbd372a756a8b92bd",
      "Id": "03eb126d73a646e0b3c6784f28db5081",
      "IsHidden": "False"
    },
    {
      "Start": "19112b14ead441dca7ac21adcc4a4d7f",
      "End": "616c2a89234a45cf8ad8c8465235ba68",
      "Id": "2ea2d1839c2d4a2d81ed46e3ec24cba1",
      "IsHidden": "False"
    },
    {
      "Start": "caff3030cd304f7da798d75b9b7a7434",
      "End": "71d3705deb2b48df81735c7e8ba6d4f5",
      "Id": "c9dc780fc68849c990ca8f91b605c6d9",
      "IsHidden": "False"
    },
    {
      "Start": "4ec26b6e17b64c14b513f82ab161493b",
      "End": "cc223f4d91344d1191a56d72b23280cc",
      "Id": "2368a03d9a50405684a9f3bcf686444e",
      "IsHidden": "False"
    },
    {
      "Start": "a9665d1f1cdc4d56b1e5386683863977",
      "End": "cd9294dda096406eb279348f2ab2c570",
      "Id": "cdcbc6d8276d4cb3ba9f03c48fe0ba73",
      "IsHidden": "False"
    },
    {
      "Start": "5226e9ab98624e5f9ed1b2eb9c04a823",
      "End": "7a8e3557bdc54350a9d4b8aca767dae0",
      "Id": "ce5227c6b5b04dd5bb45aaa561183a5a",
      "IsHidden": "False"
    },
    {
      "Start": "c072d5437c064d6d8697002d56c667fd",
      "End": "9b9b8f5dcaf94be19806c7da3d28129c",
      "Id": "db3c9ea066904bcdb11db7c474888d4b",
      "IsHidden": "False"
    },
    {
      "Start": "ec1870b8d3b04dda8f0cf261d4b23266",
      "End": "c301b6a3f58346089ead30a438f7a65f",
      "Id": "97e8d3557e0f41d29326126a2eb8dbed",
      "IsHidden": "False"
    },
    {
      "Start": "a0dc4cac00ac44d08549873ef04d4c4c",
      "End": "8cd077e5ae09478c90499096dda5ca86",
      "Id": "614176cdcc8d4fdb96dd0b48f9918ac5",
      "IsHidden": "False"
    },
    {
      "Start": "4cd533d9145f45b6b7222ce9d243919e",
      "End": "42e5269d1692493cb55c19689f6a12b7",
      "Id": "9b0ff3aef709434ca431cb3682f14529",
      "IsHidden": "False"
    },
    {
      "Start": "18aa752110fd4aac9603d0ca87608859",
      "End": "d4cbf567daae4cdfb3dde6e919fa1035",
      "Id": "6b7f297811894ed5b2dfcb5580054944",
      "IsHidden": "False"
    },
    {
      "Start": "482b78cda3154bffa351a6a81bad69af",
      "End": "30b7181926b547249eefeff19d971df1",
      "Id": "e1365c5e1d2c46be9fcd89bd8fcbffb2",
      "IsHidden": "False"
    },
    {
      "Start": "8068cff9dc8147b9a1d52fd8e9d7dd80",
      "End": "f4bcdc5c138740f381d26753bfc7f472",
      "Id": "009e729f70f343908290cf2ba71f445e",
      "IsHidden": "False"
    },
    {
      "Start": "624a017cde3a4b61a1a53265db2af40a",
      "End": "52bbbcfc360b4498a93ededd35fe27c6",
      "Id": "ff513c75fe644a7aa5719ec299bb2e17",
      "IsHidden": "False"
    },
    {
      "Start": "ffb529dcbb914259ae1409af1f91d104",
      "End": "5e7fe72322aa4bc59c7b15694888fb0d",
      "Id": "7bd78a0bbb174403b2e0ecb187a39d9d",
      "IsHidden": "False"
    }
  ],
  "Dependencies": [],
  "NodeLibraryDependencies": [
    {
      "Name": "02_Master-Check.xlsx",
      "ReferenceType": "External",
      "Nodes": [
        "100500e5e8ca4c4f8074d092046414ff",
        "636651ca158d43f7a5f22b1311c67c41"
      ]
    },
    {
      "Name": "BasePlan_63K.rvt",
      "ReferenceType": "External",
      "Nodes": [
        "b03b5de533ad46d1946cfb01737f875c"
      ]
    }
  ],
  "Thumbnail": "",
  "GraphDocumentationURL": null,
  "ExtensionWorkspaceData": [
    {
      "ExtensionGuid": "28992e1d-abb9-417f-8b1b-05e053bee670",
      "Name": "Properties",
      "Version": "2.16",
      "Data": {}
    },
    {
      "ExtensionGuid": "DFBD9CC0-DB40-457A-939E-8C8555555A9D",
      "Name": "Generative Design",
      "Version": "3.0",
      "Data": {}
    }
  ],
  "Author": "",
  "Linting": {
    "activeLinter": "None",
    "activeLinterId": "7b75fb44-43fd-4631-a878-29f4d5d8399a",
    "warningCount": 0,
    "errorCount": 0
  },
  "Bindings": [],
  "View": {
    "Dynamo": {
      "ScaleFactor": 1.0,
      "HasRunWithoutCrash": true,
      "IsVisibleInDynamoLibrary": true,
      "Version": "2.16.2.5624",
      "RunType": "Automatic",
      "RunPeriod": "1000"
    },
    "Camera": {
      "Name": "Background Preview",
      "EyeX": -17.0,
      "EyeY": 24.0,
      "EyeZ": 50.0,
      "LookX": 12.0,
      "LookY": -13.0,
      "LookZ": -58.0,
      "UpX": 0.0,
      "UpY": 1.0,
      "UpZ": 0.0
    },
    "ConnectorPins": [],
    "NodeViews": [
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "3a938488321347ab831291ade1c35e17",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 55.521903173860892,
        "Y": 764.50802499166036
      },
      {
        "Name": "Watch",
        "ShowGeometry": true,
        "Id": "6a3a0d0201cc494e88110c9f4dc9d04d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 346.536190362199,
        "Y": 338.39365411827305
      },
      {
        "Name": "Python Script",
        "ShowGeometry": true,
        "Id": "73accd101e594998a13178c844c45812",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 79.392702458256053,
        "Y": 333.037345919348
      },
      {
        "Name": "Python Script",
        "ShowGeometry": true,
        "Id": "9ad778fd162047ed81d4b937a126e37c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 326.42462986888518,
        "Y": 764.33927019549787
      },
      {
        "Name": "Boolean",
        "ShowGeometry": true,
        "Id": "501b048d7d0d418093f6588230ae56b1",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2530.9798303086,
        "Y": -730.38372221254281
      },
      {
        "Name": "String.Join",
        "ShowGeometry": true,
        "Id": "27d6a102833e4387957fb35a6cacf317",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2131.2317478571958,
        "Y": -1026.7984910326857
      },
      {
        "Name": "Data.ImportExcel",
        "ShowGeometry": true,
        "Id": "19e77731cca74c5e95d753a61069d435",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2824.9798303086,
        "Y": -923.38372221254281
      },
      {
        "Name": "String",
        "ShowGeometry": true,
        "Id": "63394fe975de4bd190db141f8a040e51",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2530.9798303086,
        "Y": -878.38372221254281
      },
      {
        "Name": "File From Path",
        "ShowGeometry": true,
        "Id": "47ecfcee36264a11a3fdb28b4233eb9b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2530.9798303086,
        "Y": -1025.3837222125428
      },
      {
        "Name": "FileSystem.CombinePath",
        "ShowGeometry": true,
        "Id": "70b12d9fb1834b9a89e5ed18da39e796",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1774.2317478571958,
        "Y": -935.79849103268566
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "aeb5f99f742d430394e4b475037bd9b2",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1774.2317478571958,
        "Y": -1083.9709910326858
      },
      {
        "Name": "String.Join",
        "ShowGeometry": true,
        "Id": "2780564aeb9042b09cdece32b67d4aa1",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1222.2417646177641,
        "Y": -669.33038529666578
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "ed6e5ffec7b14ea882d70db0a0accc3d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 946.24176461776415,
        "Y": -726.50288529666545
      },
      {
        "Name": "List.LastItem",
        "ShowGeometry": true,
        "Id": "f299887cf765427ba274a6960e077353",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 946.24176461776415,
        "Y": -578.33038529666578
      },
      {
        "Name": "String.Split",
        "ShowGeometry": true,
        "Id": "7f629a6390f74c5285a9c992ec3b6c75",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 565.24176461776415,
        "Y": -578.33038529666578
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "50840014c7a24cc8905bbb65bfccfa35",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 311.24176461776415,
        "Y": -544.50288529666545
      },
      {
        "Name": "String from Object",
        "ShowGeometry": true,
        "Id": "100500e5e8ca4c4f8074d092046414ff",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 5.4481267226724412,
        "Y": -571.96661991825545
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "732105eb9883459391d8ca2874a4a82f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 546.35984134253886,
        "Y": -964.79255577112485
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "b0310d183dcb4618864cee7982fc7783",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 292.35984134253863,
        "Y": -1108.7925557711249
      },
      {
        "Name": "List.DropItems",
        "ShowGeometry": true,
        "Id": "3495deabb3564e158d4e4df9aad94c10",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 927.35984134253886,
        "Y": -1070.6200557711247
      },
      {
        "Name": "String.Split",
        "ShowGeometry": true,
        "Id": "c21f21ce35564f9c8d9e7940504655c6",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 546.35984134253886,
        "Y": -1142.6200557711247
      },
      {
        "Name": "String.Join",
        "ShowGeometry": true,
        "Id": "680cca8619d44faeaee0da439d6b7eac",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1222.3598413425389,
        "Y": -1161.6200557711247
      },
      {
        "Name": "Document.FilePath",
        "ShowGeometry": true,
        "Id": "b03b5de533ad46d1946cfb01737f875c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -27.375926776811411,
        "Y": -1141.7049270528453
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "2f837339110c4581999d12f7398f367f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 927.35984134253886,
        "Y": -1218.7925557711249
      },
      {
        "Name": "File From Path",
        "ShowGeometry": true,
        "Id": "e2490c25dbe547c5a580ce6d2157e0bc",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -274.55187327732756,
        "Y": -571.96661991825545
      },
      {
        "Name": "File Path",
        "ShowGeometry": true,
        "Id": "636651ca158d43f7a5f22b1311c67c41",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -669.55187327732756,
        "Y": -571.96661991825545
      },
      {
        "Name": "Document.Current",
        "ShowGeometry": true,
        "Id": "047a847b2d9445a08d05744b2e545025",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -336.37592677681141,
        "Y": -1141.7049270528453
      },
      {
        "Name": "Watch",
        "ShowGeometry": true,
        "Id": "1ab8c488dc8d449a867be35376a6604e",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3243.4907400601696,
        "Y": -925.67310033771878
      },
      {
        "Name": "Python Script",
        "ShowGeometry": true,
        "Id": "d66d2e2ec4814ca6a5af7458edf72260",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2038.884078380855,
        "Y": -10.740765057464102
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "1913e1c67cbb4ef380a2c9470a433e20",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1775.884078380855,
        "Y": 23.086734942535884
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "b2b41f80a8c84c00bb892508b1fc8ae2",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1677.1150129026,
        "Y": 1262.95233760207
      },
      {
        "Name": "Python Script",
        "ShowGeometry": true,
        "Id": "b20c1ed1825f4405b13508576c1cd8a1",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2047.47757182965,
        "Y": 1220.24325844446
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "53b11b5e7a4b46088f8c8415503b1612",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1783.2715290910139,
        "Y": 332.50176073660981
      },
      {
        "Name": "Python Script",
        "ShowGeometry": true,
        "Id": "9f7043f30c1949299051d9f6ae55038e",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2055.98765396321,
        "Y": 1404.56438316825
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "991c88e22d8d45458cecee2f45891966",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1687.67670494075,
        "Y": 1524.59195860526
      },
      {
        "Name": "Python Script",
        "ShowGeometry": true,
        "Id": "61ec85bb2e094d6a932794dea958775a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2037.2715290910139,
        "Y": 298.67426073660988
      },
      {
        "Name": "Python Script",
        "ShowGeometry": true,
        "Id": "4154119bb6c34893be03febf733359c9",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2035.6747871348832,
        "Y": 612.04796148075661
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "605c0f8e61f647f885b549e157f8c377",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1717.6747871348832,
        "Y": 645.87546148075648
      },
      {
        "Name": "Python Script",
        "ShowGeometry": true,
        "Id": "08827ff33ece48baacc2f35836b1404d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2067.23766902064,
        "Y": 877.156512776554
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "08ea1a7759b440d4aaeaed74642eb49d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1678.96861123183,
        "Y": 893.607193786474
      },
      {
        "Name": "Watch",
        "ShowGeometry": true,
        "Id": "6e00512ac8014b2b9e88f4d03b8c1ab8",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2446.01514335401,
        "Y": -95.6319435233569
      },
      {
        "Name": "Watch",
        "ShowGeometry": true,
        "Id": "e85d30846c0f46698d65e28befa3b4ac",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2444.43554615018,
        "Y": 207.650719611855
      },
      {
        "Name": "Watch",
        "ShowGeometry": true,
        "Id": "8be935b4e9dd4deda38b3c2559ac7be3",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2443.05314204539,
        "Y": 522.838855502847
      },
      {
        "Name": "Watch",
        "ShowGeometry": true,
        "Id": "eceb49a83e56430991697f046d92bc4b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2438.1081901005,
        "Y": 849.205683865764
      },
      {
        "Name": "Watch",
        "ShowGeometry": true,
        "Id": "732b6d04abe44732938df692914627ca",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2441.83965143389,
        "Y": 1171.56588107441
      },
      {
        "Name": "Watch",
        "ShowGeometry": true,
        "Id": "b865945432094136b387ee73767ba469",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2435.19928855603,
        "Y": 1476.25040089038
      }
    ],
    "Annotations": [
      {
        "Id": "7230ae94d16d43d6b8a52d6f709bc9e8",
        "Title": "Read from Takeoff Excel",
        "DescriptionText": "<Double click here to edit group description>",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "19e77731cca74c5e95d753a61069d435",
          "63394fe975de4bd190db141f8a040e51",
          "47ecfcee36264a11a3fdb28b4233eb9b",
          "501b048d7d0d418093f6588230ae56b1"
        ],
        "HasNestedGroups": false,
        "Left": 2520.9798303086,
        "Top": -1098.3837222125428,
        "Width": 552.0,
        "Height": 500.0,
        "FontSize": 36.0,
        "InitialTop": -1025.3837222125428,
        "InitialHeight": 457.0,
        "TextblockHeight": 63.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "28dbc2222ea04121b1d7386a4eb52288",
        "Title": "Combine Into the Current Project Path and Template Name for Master Check",
        "DescriptionText": "<Double click here to edit group description>",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "70b12d9fb1834b9a89e5ed18da39e796",
          "27d6a102833e4387957fb35a6cacf317",
          "aeb5f99f742d430394e4b475037bd9b2"
        ],
        "HasNestedGroups": false,
        "Left": 1764.2317478571958,
        "Top": -1199.9709910326858,
        "Width": 644.0,
        "Height": 426.17250000000013,
        "FontSize": 36.0,
        "InitialTop": -1083.9709910326858,
        "InitialHeight": 340.17249999999967,
        "TextblockHeight": 106.0,
        "Background": "#FFB9F9E1"
      },
      {
        "Id": "7d4725821b59437c93252ffd8cecfa22",
        "Title": "Return the File Name of the Master Check Template",
        "DescriptionText": "<Double click here to edit group description>",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "2780564aeb9042b09cdece32b67d4aa1",
          "ed6e5ffec7b14ea882d70db0a0accc3d",
          "f299887cf765427ba274a6960e077353",
          "7f629a6390f74c5285a9c992ec3b6c75",
          "50840014c7a24cc8905bbb65bfccfa35"
        ],
        "HasNestedGroups": false,
        "Left": 301.24176461776415,
        "Top": -799.50288529666545,
        "Width": 1198.0,
        "Height": 387.0,
        "FontSize": 36.0,
        "InitialTop": -726.50288529666545,
        "InitialHeight": 344.0,
        "TextblockHeight": 63.0,
        "Background": "#FFB9F9E1"
      },
      {
        "Id": "58b327b5c53b4df8ad2b9bc6a442747d",
        "Title": "Master Check Template Location",
        "DescriptionText": "<Double click here to edit group description>",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "100500e5e8ca4c4f8074d092046414ff",
          "e2490c25dbe547c5a580ce6d2157e0bc",
          "636651ca158d43f7a5f22b1311c67c41"
        ],
        "HasNestedGroups": false,
        "Left": -679.55187327732756,
        "Top": -644.96661991825545,
        "Width": 906.0,
        "Height": 214.0,
        "FontSize": 36.0,
        "InitialTop": -571.96661991825545,
        "InitialHeight": 171.0,
        "TextblockHeight": 63.0,
        "Background": "#FFBB87C6"
      },
      {
        "Id": "7b46ceafd23c4267ac2af8735557a9be",
        "Title": "Return the Folder of the Current Project",
        "DescriptionText": "<Double click here to edit group description>",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "732105eb9883459391d8ca2874a4a82f",
          "b0310d183dcb4618864cee7982fc7783",
          "3495deabb3564e158d4e4df9aad94c10",
          "c21f21ce35564f9c8d9e7940504655c6",
          "680cca8619d44faeaee0da439d6b7eac",
          "2f837339110c4581999d12f7398f367f"
        ],
        "HasNestedGroups": false,
        "Left": 282.35984134253863,
        "Top": -1291.7925557711249,
        "Width": 1217.0000000000002,
        "Height": 459.0,
        "FontSize": 36.0,
        "InitialTop": -1218.7925557711249,
        "InitialHeight": 416.0,
        "TextblockHeight": 63.0,
        "Background": "#FFB9F9E1"
      },
      {
        "Id": "5840d1783f294c0d8490694264a35fe1",
        "Title": "Current Project",
        "DescriptionText": "<Double click here to edit group description>",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "b03b5de533ad46d1946cfb01737f875c",
          "047a847b2d9445a08d05744b2e545025"
        ],
        "HasNestedGroups": false,
        "Left": -346.37592677681141,
        "Top": -1214.7049270528453,
        "Width": 553.0,
        "Height": 205.0,
        "FontSize": 36.0,
        "InitialTop": -1141.7049270528453,
        "InitialHeight": 162.0,
        "TextblockHeight": 63.0,
        "Background": "#FFD4B6DB"
      },
      {
        "Id": "3cf9afc22ecb4638a3c64a58774c8ea8",
        "Title": "<Double click here to edit group title>",
        "DescriptionText": "<Double click here to edit group description>",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "d66d2e2ec4814ca6a5af7458edf72260",
          "1913e1c67cbb4ef380a2c9470a433e20"
        ],
        "HasNestedGroups": false,
        "Left": 1765.884078380855,
        "Top": -126.7407650574641,
        "Width": 457.0,
        "Height": 281.8275,
        "FontSize": 36.0,
        "InitialTop": -10.740765057464102,
        "InitialHeight": 201.59344918873302,
        "TextblockHeight": 106.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "3b0e7801e93b41eeb095ae70acb217c3",
        "Title": "<Double click here to edit group title>",
        "DescriptionText": "<Double click here to edit group description>",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "53b11b5e7a4b46088f8c8415503b1612",
          "61ec85bb2e094d6a932794dea958775a"
        ],
        "HasNestedGroups": false,
        "Left": 1773.2715290910139,
        "Top": 182.67426073660988,
        "Width": 447.99999999999977,
        "Height": 281.82749999999993,
        "FontSize": 36.0,
        "InitialTop": 298.67426073660988,
        "InitialHeight": 192.0,
        "TextblockHeight": 106.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "50736be59325452d8da17e90d5286b72",
        "Title": "<Double click here to edit group title>",
        "DescriptionText": "<Double click here to edit group description>",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "4154119bb6c34893be03febf733359c9",
          "605c0f8e61f647f885b549e157f8c377"
        ],
        "HasNestedGroups": false,
        "Left": 1707.6747871348832,
        "Top": 496.04796148075661,
        "Width": 512.00000000000023,
        "Height": 281.82749999999987,
        "FontSize": 36.0,
        "InitialTop": 612.04796148075661,
        "InitialHeight": 192.0,
        "TextblockHeight": 106.0,
        "Background": "#FFC1D676"
      }
    ],
    "X": 517.2930784586232,
    "Y": 334.42735147540805,
    "Zoom": 0.46195485821952503
  }
}