{
  "Uuid": "835f952c-e6fa-4cfc-8ced-085e223da08a",
  "IsCustomNode": false,
  "Description": "",
  "Name": "04a_Place_CA-Legend (Portrait)",
  "ElementResolver": {
    "ResolutionMap": {}
  },
  "Inputs": [],
  "Outputs": [],
  "Nodes": [
    {
      "ConcreteType": "CoreNodeModels.Input.Filename, CoreNodeModels",
      "HintPath": "C:\\_Albertsons\\x17 (Lineal Footage Analysis)\\Templates\\ACI_Project_Template.rte",
      "InputValue": "..\\Templates\\ACI_Project_Template.rte",
      "NodeType": "ExtensionNode",
      "Id": "35dc14e8cb7a4b1295f8637d6702a3f2",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "25aaaf7b6cc04ddb835247587d7a4a55",
          "Name": "",
          "Description": "File Path",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows you to select a file on the system to get its file path."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\r\nclr.AddReference('RevitAPI')\r\nclr.AddReference('RevitServices')\r\nclr.AddReference('System')\r\n\r\nfrom System import Guid\r\nfrom System.Collections.Generic import List\r\nfrom Autodesk.Revit.DB import *\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\n\r\n# Get the current Revit document (the active project)\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\n\r\n# Inputs from Dynamo\r\ntemplate_path = IN[0]  # File path to the Revit template (RVT) file\r\nlegend_name = IN[1].strip().lower()  # Name of the Legend View to extract, strip and lower for consistency\r\nsheet_name = IN[2].strip()  # Name of the sheet to place the legend on\r\nplacement_location = IN[3]  # XYZ coordinates for the placement of the legend (tuple/list)\r\nappend_text = IN[4]  # Text to append when renaming the existing legend\r\nnew_position = IN[5]  # New XYZ coordinates for the existing legend (tuple/list)\r\nexisting_legend_name = [name.strip().lower() for name in IN[6]] if isinstance(IN[6], list) else [IN[6].strip().lower()]  # Name(s) of the existing Legend View to search for in the current document, processed to list, stripped and lowered\r\n\r\n# Initialize debug_info\r\ndebug_info = []\r\ndebug_info.append(\"Step: Initialization\")\r\n\r\ntry:\r\n    debug_info.append(f\"Step: existing_legend_name input processed as a list with {len(existing_legend_name)} items.\")\r\n\r\n    # Start a transaction to rename and move any existing legends with the same name\r\n    TransactionManager.Instance.EnsureInTransaction(doc)\r\n    for legend_name_to_find in existing_legend_name:\r\n        debug_info.append(f\"Step: Processing existing legend with name: '{legend_name_to_find}'\")\r\n        \r\n        existing_legend = next((view for view in FilteredElementCollector(doc).OfClass(View) if view.ViewType == ViewType.Legend and view.Name.strip().lower() == legend_name_to_find), None)\r\n        \r\n        if existing_legend is None:\r\n            debug_info.append(f\"Step: No existing legend found with the given name '{legend_name_to_find}'. Please verify the name.\")\r\n        else:\r\n            # Rename the existing legend to mark it as old\r\n            old_name = existing_legend.Name\r\n            existing_legend.Name = f\"{existing_legend.Name} {append_text}\"\r\n            debug_info.append(f\"Step: Existing legend renamed from '{old_name}' to '{existing_legend.Name}'\")\r\n\r\n            # Find the viewport associated with the existing legend\r\n            existing_viewport = next((vp for vp in FilteredElementCollector(doc).OfClass(Viewport) if vp.ViewId == existing_legend.Id), None)\r\n            \r\n            if existing_viewport is None:\r\n                debug_info.append(f\"Step: No existing viewport found for the renamed legend '{existing_legend.Name}'.\")\r\n            else:\r\n                # Move the viewport to the new position\r\n                x, y, z = new_position\r\n                new_position_xyz = XYZ(x, y, z)\r\n                current_position = existing_viewport.GetBoxCenter()\r\n                debug_info.append(f\"Step: Current viewport position before move: ({current_position.X}, {current_position.Y}, {current_position.Z})\")\r\n\r\n                try:\r\n                    existing_viewport.SetBoxCenter(new_position_xyz)\r\n                    debug_info.append(f\"Step: Existing viewport moved to new position: ({x}, {y}, {z})\")\r\n                except Exception as e:\r\n                    debug_info.append(f\"Step: Error occurred while moving viewport: {e}\")\r\n\r\n    TransactionManager.Instance.TransactionTaskDone()\r\n    debug_info.append(\"Step: Completed renaming and moving the existing legends (if any)\")\r\n\r\n    # Open the Revit template document\r\n    app = doc.Application\r\n    template_doc = app.OpenDocumentFile(template_path)\r\n    debug_info.append(\"Step: Template document opened successfully\")\r\n\r\n    try:\r\n        # Find the legend view by name in the template file\r\n        legend_view = next((view for view in FilteredElementCollector(template_doc).OfClass(View) if view.ViewType == ViewType.Legend and view.Name.strip().lower() == legend_name), None)\r\n\r\n        if legend_view is None:\r\n            OUT = f\"Error: Legend view named '{legend_name}' not found in the template.\"\r\n        else:\r\n            # Start a transaction to copy the legend into the current document\r\n            TransactionManager.Instance.EnsureInTransaction(doc)\r\n\r\n            # Copy the legend to the current project\r\n            element_ids = List[ElementId]([legend_view.Id])\r\n            copied_ids = ElementTransformUtils.CopyElements(template_doc, element_ids, doc, Transform.Identity, CopyPasteOptions())\r\n\r\n            TransactionManager.Instance.TransactionTaskDone()\r\n\r\n            # Get the copied legend\r\n            copied_legend_id = copied_ids[0]\r\n            copied_legend = doc.GetElement(copied_legend_id)\r\n            debug_info.append(\"Step: Legend view copied from template into the current project\")\r\n            debug_info.append(f\"Copied Legend ID: {copied_legend_id.IntegerValue}\")\r\n    finally:\r\n        # Ensure the template document is closed properly\r\n        if template_doc.IsValidObject:\r\n            template_doc.Close(False)\r\n        debug_info.append(\"Step: Template document closed\")\r\n\r\n    # Locate the sheet where the legend should be placed\r\n    sheet = next((s for s in FilteredElementCollector(doc).OfClass(ViewSheet) if s.Name.strip().lower() == sheet_name.lower()), None)\r\n\r\n    if sheet is None:\r\n        OUT = f\"Error: Sheet named '{sheet_name}' not found in the current project.\"\r\n    else:\r\n        # Check if there is already a viewport for the same legend on the sheet\r\n        existing_viewport_on_sheet = next((vp for vp in FilteredElementCollector(doc).OfClass(Viewport) if vp.SheetId == sheet.Id and vp.ViewId == copied_legend.Id), None)\r\n        if existing_viewport_on_sheet:\r\n            debug_info.append(f\"Step: A viewport for the legend '{legend_name}' already exists on the sheet '{sheet_name}'. Skipping placement.\")\r\n        else:\r\n            # Start a transaction to place the legend on the sheet\r\n            TransactionManager.Instance.EnsureInTransaction(doc)\r\n            debug_info.append(\"Step: Transaction started for placing new legend on the specified sheet\")\r\n\r\n            # Convert placement_location to XYZ\r\n            x, y, z = placement_location\r\n            position = XYZ(x, y, z)\r\n\r\n            try:\r\n                # Place the legend view on the sheet using Viewport.Create\r\n                viewport = Viewport.Create(doc, sheet.Id, copied_legend.Id, position)\r\n\r\n                if viewport is None:\r\n                    OUT = f\"Error: Could not place the legend '{legend_name}' on sheet '{sheet_name}'.\"\r\n                else:\r\n                    legend_on_sheet_id = viewport.Id\r\n\r\n                    # Simple output for viewport creation success\r\n                    debug_info.append(f\"Step: Viewport for new legend placed successfully with Element ID: {legend_on_sheet_id.IntegerValue}\")\r\n                    debug_info.append(\"Step: New legend viewport created and placed at the specified position\")\r\n\r\n                    OUT = debug_info\r\n            except Exception as e:\r\n                TransactionManager.Instance.ForceCloseTransaction()\r\n                debug_info.append(f\"Step: Error during viewport placement: {e}\")\r\n                OUT = f\"Error during placement: {e}\"\r\n\r\n            TransactionManager.Instance.TransactionTaskDone()\r\n            debug_info.append(\"Step: Transaction completed successfully for placing the new legend\")\r\n\r\nexcept Exception as e:\r\n    debug_info.append(f\"Step: An error occurred: {e}\")\r\n    OUT = f\"Error: {e}\"\r\n\r\n# Output only the relevant result, including debug information\r\nOUT = debug_info\r\n",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "a84168fe4b0b4406a98f0db090aa930d",
      "Inputs": [
        {
          "Id": "b833beb46bbd4cd9915b79ec684bdc56",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "81595bbd3aeb43f3bf44277dfa7d45a5",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "8172db2cb50f4219a94a937cdccc1533",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "cf534886647b48c9906bb2174703fc6e",
          "Name": "IN[3]",
          "Description": "Input #3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "9a182c541e3349eea45a84d263ca30d6",
          "Name": "IN[4]",
          "Description": "Input #4",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "8e539a7ee3064a648d3902cbc8171a07",
          "Name": "IN[5]",
          "Description": "Input #5",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "3452bba0d0aa4d1aa28d410b2b2617aa",
          "Name": "IN[6]",
          "Description": "Input #6",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "ccca40a26de34301baa53702d63aafb0",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"DSP Comp Ref (Portrait)\";",
      "Id": "b7c954c52a21416f9d339dd7289e4679",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "8bd0a3e02f6244c692a3f61191ec57ad",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"FIXTURE PLAN\";",
      "Id": "5d7259f665d04c1ca3bf8bd4dbd10103",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "7923060345ac4b1bac87fd24e7d0fa5a",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "[3.483, 2.695, 0.0];",
      "Id": "c4fd386312554f0b8e6001210018bdd3",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "370da195cfa34ebfb346270688032bdc",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"(Old)\";",
      "Id": "925c6c7984434e64a5d52e0799d7d7ed",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "4949e78fd457433e869bff6a177dfa29",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "[3.483, 3.5, 0.0];",
      "Id": "b02b5c7b5e3645a8a5efdb23365b737b",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "08c17d6875b8433e8e33cb1e01627569",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "CoreNodeModels.Watch, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "51e82fea55fd4c4cb6296e4b07db0d40",
      "Inputs": [
        {
          "Id": "c4188391156147b8a21616cc47e8d9e7",
          "Name": "",
          "Description": "Node to show output from",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "3d2adf67dd6b4cef898375c192e13c58",
          "Name": "",
          "Description": "Node output",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Visualize the node's output"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "[\"DSP Comp Ref\", \"DSP Comp Ref (Portrait)\", \"DSP Comp Ref (Landscape)\"];",
      "Id": "1441378bf5b14d5d836985343daea077",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "739a92fa2f184a43a9ef5c27030e17d9",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    }
  ],
  "Connectors": [
    {
      "Start": "25aaaf7b6cc04ddb835247587d7a4a55",
      "End": "b833beb46bbd4cd9915b79ec684bdc56",
      "Id": "22ea43e467944a4d95a352fdc28458d3",
      "IsHidden": "False"
    },
    {
      "Start": "ccca40a26de34301baa53702d63aafb0",
      "End": "c4188391156147b8a21616cc47e8d9e7",
      "Id": "c1f08a84357d43c38220e0e0dbab7dc0",
      "IsHidden": "False"
    },
    {
      "Start": "8bd0a3e02f6244c692a3f61191ec57ad",
      "End": "81595bbd3aeb43f3bf44277dfa7d45a5",
      "Id": "3b32c885187b4c258f4b0f3bb3703179",
      "IsHidden": "False"
    },
    {
      "Start": "7923060345ac4b1bac87fd24e7d0fa5a",
      "End": "8172db2cb50f4219a94a937cdccc1533",
      "Id": "63a43ca0bf8d4a9e935c151d0a6bebe1",
      "IsHidden": "False"
    },
    {
      "Start": "370da195cfa34ebfb346270688032bdc",
      "End": "cf534886647b48c9906bb2174703fc6e",
      "Id": "a0608fdf5af542aaabde9a733da9e7ce",
      "IsHidden": "False"
    },
    {
      "Start": "4949e78fd457433e869bff6a177dfa29",
      "End": "9a182c541e3349eea45a84d263ca30d6",
      "Id": "eace8072da1d4a57b585e285ff76df51",
      "IsHidden": "False"
    },
    {
      "Start": "08c17d6875b8433e8e33cb1e01627569",
      "End": "8e539a7ee3064a648d3902cbc8171a07",
      "Id": "f3dfd1adb9fb43348e9d774d468f5ff3",
      "IsHidden": "False"
    },
    {
      "Start": "739a92fa2f184a43a9ef5c27030e17d9",
      "End": "3452bba0d0aa4d1aa28d410b2b2617aa",
      "Id": "0877dc0a1e774fba85b13b5a2ca7ce7b",
      "IsHidden": "False"
    }
  ],
  "Dependencies": [],
  "NodeLibraryDependencies": [
    {
      "Name": "ACI_Project_Template.rte",
      "ReferenceType": "External",
      "Nodes": [
        "35dc14e8cb7a4b1295f8637d6702a3f2"
      ]
    }
  ],
  "Thumbnail": "",
  "GraphDocumentationURL": null,
  "ExtensionWorkspaceData": [
    {
      "ExtensionGuid": "28992e1d-abb9-417f-8b1b-05e053bee670",
      "Name": "Properties",
      "Version": "2.16",
      "Data": {}
    },
    {
      "ExtensionGuid": "DFBD9CC0-DB40-457A-939E-8C8555555A9D",
      "Name": "Generative Design",
      "Version": "3.0",
      "Data": {}
    }
  ],
  "Author": "",
  "Linting": {
    "activeLinter": "None",
    "activeLinterId": "7b75fb44-43fd-4631-a878-29f4d5d8399a",
    "warningCount": 0,
    "errorCount": 0
  },
  "Bindings": [],
  "View": {
    "Dynamo": {
      "ScaleFactor": 1.0,
      "HasRunWithoutCrash": true,
      "IsVisibleInDynamoLibrary": true,
      "Version": "2.16.4.10216",
      "RunType": "Manual",
      "RunPeriod": "1000"
    },
    "Camera": {
      "Name": "Background Preview",
      "EyeX": -17.0,
      "EyeY": 24.0,
      "EyeZ": 50.0,
      "LookX": 12.0,
      "LookY": -13.0,
      "LookZ": -58.0,
      "UpX": 0.0,
      "UpY": 1.0,
      "UpZ": 0.0
    },
    "ConnectorPins": [],
    "NodeViews": [
      {
        "Name": "Location of Template",
        "ShowGeometry": true,
        "Id": "35dc14e8cb7a4b1295f8637d6702a3f2",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2527.6254690050919,
        "Y": 3456.5732307798203
      },
      {
        "Name": "Copy and Place Legend",
        "ShowGeometry": true,
        "Id": "a84168fe4b0b4406a98f0db090aa930d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3314.1656702205955,
        "Y": 3908.5504934290429
      },
      {
        "Name": "CA to Use",
        "ShowGeometry": true,
        "Id": "b7c954c52a21416f9d339dd7289e4679",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2527.6254690050919,
        "Y": 3614.40073077982
      },
      {
        "Name": "Sheet to Place CA",
        "ShowGeometry": true,
        "Id": "5d7259f665d04c1ca3bf8bd4dbd10103",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2610.4340777776597,
        "Y": 3905.7283138396583
      },
      {
        "Name": "CA Location",
        "ShowGeometry": true,
        "Id": "c4fd386312554f0b8e6001210018bdd3",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2593.662466114451,
        "Y": 4058.8702555236173
      },
      {
        "Name": "Append to Existing CA (if Present)",
        "ShowGeometry": true,
        "Id": "925c6c7984434e64a5d52e0799d7d7ed",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2513.2250255338536,
        "Y": 4296.53128742514
      },
      {
        "Name": "New Position of Existing CA",
        "ShowGeometry": true,
        "Id": "b02b5c7b5e3645a8a5efdb23365b737b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2516.6962688741532,
        "Y": 4448.53128742514
      },
      {
        "Name": "Watch",
        "ShowGeometry": true,
        "Id": "51e82fea55fd4c4cb6296e4b07db0d40",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3665.8724728330435,
        "Y": 3911.3269731482778
      },
      {
        "Name": "Existing CAs to Search For",
        "ShowGeometry": true,
        "Id": "1441378bf5b14d5d836985343daea077",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2193.669254031643,
        "Y": 4595.889096141289
      }
    ],
    "Annotations": [
      {
        "Id": "4be522e2219f4c2ab937091c7d350bf9",
        "Title": "CA Template",
        "DescriptionText": "<Double click here to edit group description>",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "35dc14e8cb7a4b1295f8637d6702a3f2",
          "b7c954c52a21416f9d339dd7289e4679"
        ],
        "HasNestedGroups": false,
        "Left": 2517.6254690050919,
        "Top": 3383.5732307798203,
        "Width": 355.0,
        "Height": 362.82749999999987,
        "FontSize": 36.0,
        "InitialTop": 3456.5732307798203,
        "InitialHeight": 302.82749999999987,
        "TextblockHeight": 63.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "0ecb8436de2c4d9a9bc06c4e36bff2f9",
        "Title": "CA Placement in Project",
        "DescriptionText": "<Double click here to edit group description>",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "c4fd386312554f0b8e6001210018bdd3",
          "5d7259f665d04c1ca3bf8bd4dbd10103"
        ],
        "HasNestedGroups": false,
        "Left": 2583.662466114451,
        "Top": 3780.5283138396585,
        "Width": 261.0,
        "Height": 410.34194168395925,
        "FontSize": 36.0,
        "InitialTop": 3905.7283138396583,
        "InitialHeight": 298.14194168395943,
        "TextblockHeight": 115.2,
        "Background": "#FFC1D676"
      },
      {
        "Id": "0a8253c2955f4ac984087f7e4240853b",
        "Title": "Handle exisitng CA in Project",
        "DescriptionText": "<Double click here to edit group description>",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "925c6c7984434e64a5d52e0799d7d7ed",
          "b02b5c7b5e3645a8a5efdb23365b737b",
          "1441378bf5b14d5d836985343daea077"
        ],
        "HasNestedGroups": false,
        "Left": 2183.669254031643,
        "Top": 4223.53128742514,
        "Width": 667.0,
        "Height": 504.35780871614861,
        "FontSize": 36.0,
        "InitialTop": 4296.53128742514,
        "InitialHeight": 292.0,
        "TextblockHeight": 63.0,
        "Background": "#FFC1D676"
      }
    ],
    "X": -1196.37329135183,
    "Y": -1635.8594275630335,
    "Zoom": 0.493630492550703
  }
}